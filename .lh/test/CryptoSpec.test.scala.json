{
    "sourceFile": "test/CryptoSpec.test.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 192,
            "patches": [
                {
                    "date": 1697636882210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697636916685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,3 +1,4 @@\n-object CryptoSpec  {\n+\n+object CryptoSpec  extends CatsEffectSuite {\n   \n }\n"
                },
                {
                    "date": 1697636922472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+packa\n+import munit.CatsEffectSuite\n \n object CryptoSpec  extends CatsEffectSuite {\n   \n }\n"
                },
                {
                    "date": 1697636929213,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-packa\n+package x\n import munit.CatsEffectSuite\n \n object CryptoSpec  extends CatsEffectSuite {\n   \n"
                },
                {
                    "date": 1697636934517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-package x\n+package xyz.didx\n import munit.CatsEffectSuite\n \n object CryptoSpec  extends CatsEffectSuite {\n   \n"
                },
                {
                    "date": 1697636946239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,8 @@\n package xyz.didx\n import munit.CatsEffectSuite\n \n object CryptoSpec  extends CatsEffectSuite {\n+\n+    \n   \n }\n"
                },
                {
                    "date": 1697636963883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,7 @@\n import munit.CatsEffectSuite\n \n object CryptoSpec  extends CatsEffectSuite {\n \n-    \n+\n   \n }\n"
                },
                {
                    "date": 1697636972642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,7 +2,8 @@\n import munit.CatsEffectSuite\n \n object CryptoSpec  extends CatsEffectSuite {\n \n+// RSA Key\n \n   \n }\n"
                },
                {
                    "date": 1697637002898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,7 @@\n \n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n-\n   \n+  \n }\n"
                },
                {
                    "date": 1697637009754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,7 @@\n \n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n+  test(\"\")\n   \n-  \n }\n"
                },
                {
                    "date": 1697637020000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,7 +3,7 @@\n \n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n-  test(\"\")\n+  test(\"Generate an RSA KeyPair\")\n   \n }\n"
                },
                {
                    "date": 1697637032653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,6 +4,9 @@\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\")\n+    val keyPair = Crypto.generateKeyPair(\"RSA\")\n+    assert(keyPair.getPublic.getAlgorithm == \"RSA\")\n+    assert(keyPair.getPrivate.getAlgorithm == \"RSA\")\n   \n }\n"
                },
                {
                    "date": 1697637047652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n package xyz.didx\n import munit.CatsEffectSuite\n \n+\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\")\n"
                },
                {
                    "date": 1697637052707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,11 @@\n package xyz.didx\n import munit.CatsEffectSuite\n \n+import com.nimbusds.jose.jwk.*\n+import com.nimbusds.jose.jwk.gen.*;\n \n+\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\")\n"
                },
                {
                    "date": 1697637075874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,17 @@\n package xyz.didx\n import munit.CatsEffectSuite\n \n import com.nimbusds.jose.jwk.*\n-import com.nimbusds.jose.jwk.gen.*;\n+import com.nimbusds.jose.jwk.gen.*\n \n \n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\")\n-    val keyPair = Crypto.generateKeyPair(\"RSA\")\n-    assert(keyPair.getPublic.getAlgorithm == \"RSA\")\n-    assert(keyPair.getPrivate.getAlgorithm == \"RSA\")\n-  \n+    val keyPair = jwk = new RSAKeyGenerator(2048)\n+    .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n+    .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n+    .issueTime(new Date()) // issued-at timestamp (optional)\n+    .generate()\n }\n"
                },
                {
                    "date": 1697637101807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n package xyz.didx\n import munit.CatsEffectSuite\n \n+import java.util.*;\n+\n+\n import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.jwk.gen.*\n \n \n"
                },
                {
                    "date": 1697637111792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n package xyz.didx\n import munit.CatsEffectSuite\n \n-import java.util.*;\n+import java.util.*\n \n \n import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.jwk.gen.*\n@@ -10,9 +10,9 @@\n \n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n-  test(\"Generate an RSA KeyPair\")\n+  test(\"Generate an RSA KeyPair\") \n     val keyPair = jwk = new RSAKeyGenerator(2048)\n     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n     .issueTime(new Date()) // issued-at timestamp (optional)\n"
                },
                {
                    "date": 1697637121645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,11 +10,12 @@\n \n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n-  test(\"Generate an RSA KeyPair\") \n+  test(\"Generate an RSA KeyPair\") {\n     val keyPair = jwk = new RSAKeyGenerator(2048)\n     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n     .issueTime(new Date()) // issued-at timestamp (optional)\n     .generate()\n }\n+}\n"
                },
                {
                    "date": 1697637131660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n-    val keyPair = jwk = new RSAKeyGenerator(2048)\n+    val keyPair =new RSAKeyGenerator(2048)\n     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n     .issueTime(new Date()) // issued-at timestamp (optional)\n     .generate()\n"
                },
                {
                    "date": 1697637363693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,6 +16,7 @@\n     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n     .issueTime(new Date()) // issued-at timestamp (optional)\n     .generate()\n+    \n }\n }\n"
                },
                {
                    "date": 1697637369469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,7 +16,8 @@\n     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n     .issueTime(new Date()) // issued-at timestamp (optional)\n     .generate()\n-    \n+\n+    println(keyPair.toPublicJWK().toJSONString())\n }\n }\n"
                },
                {
                    "date": 1697637404520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n-    val keyPair =new RSAKeyGenerator(2048)\n+    val keyPair = new RSAKeyGenerator(2048)\n     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n     .issueTime(new Date()) // issued-at timestamp (optional)\n     .generate()\n"
                },
                {
                    "date": 1697637417686,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n     val keyPair = new RSAKeyGenerator(2048)\n-    .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n-    .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n-    .issueTime(new Date()) // issued-at timestamp (optional)\n-    .generate()\n+        .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n+        .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n+        .issueTime(new Date()) // issued-at timestamp (optional)\n+        .generate()\n \n     println(keyPair.toPublicJWK().toJSONString())\n }\n }\n"
                },
                {
                    "date": 1697637492563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n+    val x = \n     val keyPair = new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n"
                },
                {
                    "date": 1697637500762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,15 @@\n object CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n-    val x = \n+    val x = for {\n+      keyPair <- IO(new RSAKeyGenerator(2048)\n+        .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n+        .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n+        .issueTime(new Date()) // issued-at timestamp (optional)\n+        .generate())\n+    } yield keyPair\n     val keyPair = new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n"
                },
                {
                    "date": 1697637507032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n     } yield keyPair\n-    val keyPair = new RSAKeyGenerator(2048)\n-        .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n-        .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n-        .issueTime(new Date()) // issued-at timestamp (optional)\n-        .generate()\n+  \n \n     println(keyPair.toPublicJWK().toJSONString())\n }\n }\n"
                },
                {
                    "date": 1697637517106,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \n \n import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.jwk.gen.*\n+import cats.effect.IO\n \n \n object CryptoSpec  extends CatsEffectSuite {\n \n"
                },
                {
                    "date": 1697637529430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,7 +21,6 @@\n         .generate())\n     } yield keyPair\n   \n \n-    println(keyPair.toPublicJWK().toJSONString())\n }\n }\n"
                },
                {
                    "date": 1697637536040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n+       \n     } yield keyPair\n   \n \n }\n"
                },
                {
                    "date": 1697637541929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       \n+       _ <- IO(println(keyPair.toPublicJWK().toJSONString()))\n     } yield keyPair\n   \n \n }\n"
                },
                {
                    "date": 1697637550926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        _ <- IO(println(keyPair.toPublicJWK().toJSONString()))\n     } yield keyPair\n+    x.\n   \n \n }\n }\n"
                },
                {
                    "date": 1697637597724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import com.nimbusds.jose.jwk.gen.*\n import cats.effect.IO\n \n \n-object CryptoSpec  extends CatsEffectSuite {\n+class CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n     val x = for {\n@@ -20,9 +20,9 @@\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        _ <- IO(println(keyPair.toPublicJWK().toJSONString()))\n     } yield keyPair\n-    x.\n+    x.unsafeRunSync()\n   \n \n }\n }\n"
                },
                {
                    "date": 1697637623692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(keyPair.toPublicJWK().toJSONString()))\n+       _ <- IO(println(keyPair.toPublicJWK().toJSONString().))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637628993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(keyPair.toPublicJWK().toJSONString().))\n+       _ <- IO(println(keyPair.toPublicJWK().toJSONString().spa))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637656566,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(keyPair.toPublicJWK().toJSONString().spa))\n+       _ <- IO(println(keyPair.toPublicJWK().toJSONString()spaces2))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637668119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(keyPair.toPublicJWK().toJSONString()spaces2))\n+       _ <- IO(println(parsekeyPair.toPublicJWK().toJSONString().spaces2))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637677483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parsekeyPair.toPublicJWK().toJSONString().spaces2))\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).spaces2))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637700395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import com.nimbusds.jose.jwk.gen.*\n import cats.effect.IO\n \n \n+\n class CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n"
                },
                {
                    "date": 1697637707754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,11 +6,11 @@\n \n import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.jwk.gen.*\n import cats.effect.IO\n+import io.circe.parser.parse\n \n \n-\n class CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n"
                },
                {
                    "date": 1697637723677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n \n import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.jwk.gen.*\n import cats.effect.IO\n-import io.circe.parser.parse\n+import io.circe.parser.*\n \n \n class CryptoSpec  extends CatsEffectSuite {\n \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).spaces2))\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString().spaces2))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637728755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString().spaces2))\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString().spaces2)))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637741308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString().spaces2)))\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString())))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637762239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,10 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString())))\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).\n+       )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637769885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null)))\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637775536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null)))\n+       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null))).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637806384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n+        \n        _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null))).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n"
                },
                {
                    "date": 1697637813938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-        \n+       json <- \n        _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null))).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n"
                },
                {
                    "date": 1697637826294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       json <- \n+       json <- parse\n        _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null))).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n"
                },
                {
                    "date": 1697637834903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n-       json <- parse\n+       json <- parse(keyPair.toPublicJWK().toJSONString())\n        _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null))).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n"
                },
                {
                    "date": 1697637862570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- IO(println(parse(keyPair.toPublicJWK().toJSONString()).getOrElse(Json.Null))).\n+       _ <- IO(println().\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637871605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- IO(println().\n+       _ <- IO(println(json.).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637877015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- IO(println(json.).\n+       _ <- IO(println(json.spaces2).\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637884818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- IO(println(json.spaces2).\n+       _ <- IO(println(json.spaces2))\n        )))\n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637892801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n        _ <- IO(println(json.spaces2))\n-       )))\n+\n     } yield keyPair\n     x.unsafeRunSync()\n   \n \n"
                },
                {
                    "date": 1697637917214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- IO(println(json.spaces2))\n+       _ <- (println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637923939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- (println(json.spaces2))\n+       _ <- EitherT(println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637950796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- EitherT(println(json.spaces2))\n+       _ <- EitherT.(println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697637961551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.jwk.gen.*\n import cats.effect.IO\n import io.circe.parser.*\n+import cats.data.EitherT\n \n \n class CryptoSpec  extends CatsEffectSuite {\n \n"
                },
                {
                    "date": 1697637977720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- EitherT.(println(json.spaces2))\n+       _ <- EitherT.rightT(println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697638021043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- EitherT.rightT(println(json.spaces2))\n+       _ <- EitherT.rightT(IOprintln(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697638095134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,15 @@\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n     val x = for {\n-      keyPair <- IO(new RSAKeyGenerator(2048)\n+      keyPair <- EitheIO(new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- EitherT.rightT(IOprintln(json.spaces2))\n+       _ <- EitherT.rightT(IO.println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697638101935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n     val x = for {\n-      keyPair <- EitheIO(new RSAKeyGenerator(2048)\n+      keyPair <- EitherTIO(new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n"
                },
                {
                    "date": 1697638115569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n     val x = for {\n-      keyPair <- EitherTIO(new RSAKeyGenerator(2048)\n+      keyPair <- EitherT.rightTIO(new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate())\n"
                },
                {
                    "date": 1697638180791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n     val x = for {\n-      keyPair <- EitherT.rightTIO(new RSAKeyGenerator(2048)\n+      keyPair <- EitherT.right(IO(new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n-        .generate())\n+        .generate()))\n        json <- parse(keyPair.toPublicJWK().toJSONString())\n        _ <- EitherT.rightT(IO.println(json.spaces2))\n \n     } yield keyPair\n"
                },
                {
                    "date": 1697638208541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate()))\n-       json <- parse(keyPair.toPublicJWK().toJSONString())\n+       json <- EitherT(parse(keyPair.toPublicJWK().toJSONString())\n        _ <- EitherT.rightT(IO.println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n"
                },
                {
                    "date": 1697638283908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,10 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate()))\n-       json <- EitherT(parse(keyPair.toPublicJWK().toJSONString())\n-       _ <- EitherT.rightT(IO.println(json.spaces2))\n+       json <- EitherT(parse(keyPair.toPublicJWK().toJSONString()))\n+       _ <- EitherT.right(IO.println(json.spaces2))\n \n     } yield keyPair\n     x.unsafeRunSync()\n   \n"
                },
                {
                    "date": 1697638338411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         .generate()))\n        json <- EitherT(parse(keyPair.toPublicJWK().toJSONString()))\n        _ <- EitherT.right(IO.println(json.spaces2))\n \n-    } yield keyPair\n+    } yield keyPair.value\n     x.unsafeRunSync()\n   \n \n }\n"
                },
                {
                    "date": 1697638361515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n class CryptoSpec  extends CatsEffectSuite {\n \n // RSA Key\n   test(\"Generate an RSA KeyPair\") {\n-    val x = for {\n+    val x = (for {\n       keyPair <- EitherT.right(IO(new RSAKeyGenerator(2048)\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n"
                },
                {
                    "date": 1697638468694,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,12 +20,12 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate()))\n-       json <- EitherT(parse(keyPair.toPublicJWK().toJSONString()))\n+       json <- EitherT(IOparse(keyPair.toPublicJWK().toJSONString()))\n        _ <- EitherT.right(IO.println(json.spaces2))\n \n-    } yield keyPair.value\n+    } yield keyPair).value\n     x.unsafeRunSync()\n   \n \n }\n"
                },
                {
                    "date": 1697638480653,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate()))\n-       json <- EitherT(IOparse(keyPair.toPublicJWK().toJSONString()))\n+       json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString()))\n        _ <- EitherT.right(IO.println(json.spaces2))\n \n     } yield keyPair).value\n     x.unsafeRunSync()\n"
                },
                {
                    "date": 1697638549173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,14 @@\n         .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n         .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n         .issueTime(new Date()) // issued-at timestamp (optional)\n         .generate()))\n-       json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString()))\n+       json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n        _ <- EitherT.right(IO.println(json.spaces2))\n \n     } yield keyPair).value\n     x.unsafeRunSync()\n   \n \n }\n }\n+\n"
                },
                {
                    "date": 1697638555687,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,7 +27,8 @@\n     } yield keyPair).value\n     x.unsafeRunSync()\n   \n \n+  }\n+  \n }\n-}\n \n"
                },
                {
                    "date": 1697638573455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,7 +28,8 @@\n     x.unsafeRunSync()\n   \n \n   }\n-  \n+  test(\"Generate an KeyPair\") {\n+      val x \n }\n \n"
                },
                {
                    "date": 1697638607408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,8 @@\n     x.unsafeRunSync()\n   \n \n   }\n-  test(\"Generate an KeyPair\") {\n+  test(\"Generate anED25519\") {\n       val x \n }\n \n"
                },
                {
                    "date": 1697638617976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,8 @@\n     x.unsafeRunSync()\n   \n \n   }\n-  test(\"Generate anED25519\") {\n+  test(\"Generate an ED25519\") {\n       val x \n }\n \n"
                },
                {
                    "date": 1697638623672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,7 +29,7 @@\n   \n \n   }\n   test(\"Generate an ED25519\") {\n-      val x \n+      val x =\n }\n \n"
                },
                {
                    "date": 1697638628800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,7 +29,8 @@\n   \n \n   }\n   test(\"Generate an ED25519\") {\n-      val x =\n+      val x = (for {\n+        \n }\n \n"
                },
                {
                    "date": 1697638641822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,7 +30,13 @@\n \n   }\n   test(\"Generate an ED25519\") {\n       val x = (for {\n-        \n+        keyPair <- EitherT.right(IO(new OctetKeyPairGenerator(Curve.Ed25519)\n+            .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n+            .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n+            .issueTime(new Date()) // issued-at timestamp (optional)\n+            .generate()))\n+         json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n+         _ <- EitherT.right(IO.println(json.spaces2))\n }\n \n"
                },
                {
                    "date": 1697638657228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,6 +37,7 @@\n             .issueTime(new Date()) // issued-at timestamp (optional)\n             .generate()))\n          json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n          _ <- EitherT.right(IO.println(json.spaces2))\n+         \n }\n \n"
                },
                {
                    "date": 1697638662794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,7 +37,7 @@\n             .issueTime(new Date()) // issued-at timestamp (optional)\n             .generate()))\n          json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n          _ <- EitherT.right(IO.println(json.spaces2))\n-         \n+       \n }\n \n"
                },
                {
                    "date": 1697638670683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,7 +37,8 @@\n             .issueTime(new Date()) // issued-at timestamp (optional)\n             .generate()))\n          json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n          _ <- EitherT.right(IO.println(json.spaces2))\n-       \n+      }\n+      \n }\n \n"
                },
                {
                    "date": 1697638676164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,7 +38,8 @@\n             .generate()))\n          json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n          _ <- EitherT.right(IO.println(json.spaces2))\n       }\n-      \n+        yield keyPair).value\n+        \n }\n \n"
                },
                {
                    "date": 1697638687182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,7 +39,8 @@\n          json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n          _ <- EitherT.right(IO.println(json.spaces2))\n       }\n         yield keyPair).value\n+        x.unsafeRunSync()\n         \n }\n \n"
                },
                {
                    "date": 1697638761048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,7 +40,8 @@\n          _ <- EitherT.right(IO.println(json.spaces2))\n       }\n         yield keyPair).value\n         x.unsafeRunSync()\n-        \n+    }\n+  \n }\n \n"
                },
                {
                    "date": 1697638766131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,7 +41,8 @@\n       }\n         yield keyPair).value\n         x.unsafeRunSync()\n     }\n-  \n+  test(\"Generate an 25519\") {\n+\n }\n \n"
                },
                {
                    "date": 1697638771245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,8 +41,9 @@\n       }\n         yield keyPair).value\n         x.unsafeRunSync()\n     }\n-  test(\"Generate an 25519\") {\n+  test(\"Generate an X25519\") {\n+    \n \n }\n \n"
                },
                {
                    "date": 1697638777673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,8 @@\n         yield keyPair).value\n         x.unsafeRunSync()\n     }\n   test(\"Generate an X25519\") {\n-    \n+        \n \n }\n \n"
                },
                {
                    "date": 1697638982560,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,20 @@\n         yield keyPair).value\n         x.unsafeRunSync()\n     }\n   test(\"Generate an X25519\") {\n-        \n+        val x = (for {\n+            keyPair <- EitherT.right(IO(new OctetKeyPairGenerator(Curve.X25519)\n+                .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n+                .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n+                .issueTime(new Date()) // issued-at timestamp (optional)\n+                .generate()))\n+             json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n+             _ <- EitherT.right(IO.println(json.spaces2))\n+        }\n+            yield keyPair).value\n+            x.unsafeRunSync()\n+        }\n+  \n \n }\n \n"
                },
                {
                    "date": 1697638989029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,8 @@\n         }\n             yield keyPair).value\n             x.unsafeRunSync()\n         }\n-  \n+  test(\"\")\n \n }\n \n"
                },
                {
                    "date": 1697638998019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,8 @@\n         }\n             yield keyPair).value\n             x.unsafeRunSync()\n         }\n-  test(\"\")\n+  test(\"Generate an E\")\n \n }\n \n"
                },
                {
                    "date": 1697639004433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,8 @@\n         }\n             yield keyPair).value\n             x.unsafeRunSync()\n         }\n-  test(\"Generate an E\")\n+  test(\"Generate an EC P\")\n \n }\n \n"
                },
                {
                    "date": 1697639015987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,10 @@\n         }\n             yield keyPair).value\n             x.unsafeRunSync()\n         }\n-  test(\"Generate an EC P\")\n+  test(\"Generate an EC P384\") {\n+    \n+  }\n \n }\n \n"
                },
                {
                    "date": 1697639024196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,20 @@\n             yield keyPair).value\n             x.unsafeRunSync()\n         }\n   test(\"Generate an EC P384\") {\n-    \n+            val x = (for {\n+                keyPair <- EitherT.right(IO(new ECKeyGenerator(Curve.P_384)\n+                    .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n+                    .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n+                    .issueTime(new Date()) // issued-at timestamp (optional)\n+                    .generate()))\n+                 json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n+                 _ <- EitherT.right(IO.println(json.spaces2))\n+            }\n+                yield keyPair).value\n+                x.unsafeRunSync()\n+            }\n   }\n \n }\n \n"
                },
                {
                    "date": 1697639035051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,7 +68,7 @@\n                 yield keyPair).value\n                 x.unsafeRunSync()\n             }\n   }\n-\n }\n+}\n \n"
                },
                {
                    "date": 1697639041261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,6 +69,5 @@\n                 x.unsafeRunSync()\n             }\n   }\n }\n-}\n \n"
                },
                {
                    "date": 1697639937543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,13 +61,14 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n+                    \n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n                 x.unsafeRunSync()\n             }\n   }\n-}\n \n+\n"
                },
                {
                    "date": 1697639957152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                    \n+                 ecKey <- \n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697639982374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- \n+                 ecKey <- EitherT.right(IO(keyPair.toECKey().))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640035735,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECKey().))\n+                 ecKey <- EitherT.right(IO(keyPair.toECKey().toEC))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640043882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECKey().toEC))\n+                 ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640064997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n+                 ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey().))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640090846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey().))\n+                 ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640096144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n+                 \n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640101705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 \n+                 _ <-\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640114926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <-\n+                 _ <- EitherT.right(IO.println(ecKey.getParams().getCurve().toString()))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640424596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.getParams().getCurve().toString()))\n+                 _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640448303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey))\n+                 _ <- EitherT.right(IO.println(ecKey.))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640457084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.))\n+                 _ <- EitherT.right(IO.println(ecKey.get))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640463056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.get))\n+                 _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640472563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey))\n+                 _ <- EitherT.right(IO.println(ecKey)))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640491720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey)))\n+                 _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640499644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey))\n+                 _ <- EitherT.right(IO.println(ecKey.))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640520508,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.))\n+                 _ <- EitherT.right(IO.println(ecKey.getW))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640543614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.getW))\n+                 _ <- EitherT.right(IO.println(ecKey.))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640552015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.))\n+                 _ <- EitherT.right(IO.println(ecKey.to))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640561433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.to))\n+                 _ <- EitherT.right(IO.println(ecKey.toString))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640614282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.toString))\n+                 _ <- EitherT.right(IO.println(ecKey.))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640629498,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.))\n+                 _ <- EitherT.right(IO.println(ecKey.ge))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640636026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.ge))\n+                 _ <- EitherT.right(IO.println(ecKey.g))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640660336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.g))\n+                 _ <- EitherT.right(IO.println(ecKey.x))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697640670400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 _ <- EitherT.right(IO.println(ecKey.x))\n+                 _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697698304947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n+                 \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697698323168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 \n+                 x <- \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697698332252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 x <- \n+                 \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697698343170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 \n+                 pk\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697698368924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk\n+                 pk <- EitherT.right(IO(ecKey.getW().getAffineX().toBigInteger()))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697698413602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(ecKey.getW().getAffineX().toBigInteger()))\n+                 pk <- EitherT.right(IO(ecKey.getW().getAffineX()))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701296410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(ecKey.getW().getAffineX()))\n+                 pk <- EitherT.right(IO(ecKey))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701368347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(ecKey))\n+                 pk <- EitherT.right(IO(key.))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701377574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(key.))\n+                 pk <- EitherT.right(IO(keyPair.get))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701423894,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.get))\n+                 pk <- EitherT.right(IO(keyPair.getEncoder))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701464716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.getEncoder))\n+                 pk <- EitherT.right(IO(keyPai))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701473157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPai))\n+                 pk <- EitherT.right(IO(keyPair,toP))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701483020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair,toP))\n+                 pk <- EitherT.right(IO(keyPair,toPublicJWK.get))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701499072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair,toPublicJWK.get))\n+                 pk <- EitherT.right(IO(keyPair,toPublicJWK.getPublicKeyFromBase64))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701504300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair,toPublicJWK.getPublicKeyFromBase64))\n+                 pk <- EitherT.right(IO(keyPair,toPublicJWK.getPublicKeyFromBase64.))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701513943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair,toPublicJWK.getPublicKeyFromBase64.))\n+                 pk <- EitherT.right(IO(keyPair,toPublicJWK.getPublicKeyFromBase64))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701525812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair,toPublicJWK.getPublicKeyFromBase64))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.getPublicKeyFromBase64))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701539489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.getPublicKeyFromBase64))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701553462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey()))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701559227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey()))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701572113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW()))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701589004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW()))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701600237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toBigInteger()))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701640489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toBigInteger()))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701652539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().))\n+                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701666018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,8 +63,9 @@\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n                  pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n+                 \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701812306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,11 +61,11 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECKey().toECPublicKey()))\n+                 ecKey <- EitherT.right(IO(keyPair.toECPublicKey()))\n                  pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n-                 \n+\n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n"
                },
                {
                    "date": 1697701836212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECPublicKey()))\n+                 ecKey <- EitherT.right(IO(keyPair.toECPublicKey().))\n                  pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697701856121,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECPublicKey().))\n+                 ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697701896644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n+                 pk <- EitherT.right(IO(Crypto.keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697701907051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(Crypto.keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58().toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697701915843,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(Crypto.encodeToBase58().toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58(.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697701922488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(Crypto.encodeToBase58(.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697701967310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(Crypto.encodeToBase58(keyPair.toPublicJWK.toECKey().toECPublicKey().getW().getAffineX().toByteArray))\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58())\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697701995506,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(Crypto.encodeToBase58())\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58(pk)))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697702004708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n-                 pk <- EitherT.right(IO(Crypto.encodeToBase58(pk)))\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(ecKey))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697702009933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(ecKey))\n+                 _ <- EitherT.right(IO.println(pk))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702048553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(pk))\n+                 _ <- EitherT.right(IO.println(s\"pk))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702053729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"pk))\n+                 _ <- EitherT.right(IO.println(s\"$pk))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702058912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk))\n+                 _ <- EitherT.right(IO.println(s\"$pk\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702064742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk\"))\n+                 _ <- EitherT.right(IO.println(s\"$pk \"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702071586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk \"))\n+                 _ <- EitherT.right(IO.println(s\"$pk - leng\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702078071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk - leng\"))\n+                 _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.length}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702141777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.length}\"))\n+                 _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702148448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n                     .generate()))\n                  ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.}\"))\n+                 _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702231536,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toECPublicKey().getEncoded()))\n+                 ecKey <- EitherT.right(IO(keyPair.pub.getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702237807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.pub.getEncoded()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702246460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getEncoded()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().getEncoded()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702265127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().getEncoded()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702292578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.get))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702320738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.get))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702348762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().toByteArray))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702361684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().toByteArray))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702372044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decode()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702462869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n+                    \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decode()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n"
                },
                {
                    "date": 1697702469388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                    \n+                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decode()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n"
                },
                {
                    "date": 1697702485868,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n                     .keyUse(KeyUse.SIGNATURE) // indicate the intended use of the key (optional)\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n-                 \n+                \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decode()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n"
                },
                {
                    "date": 1697702505872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decode()))\n-                 pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey)))\n+                 pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n"
                },
                {
                    "date": 1697702512189,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                 \n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decode()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702534516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                 \n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decodeToString()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702544521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n                     .keyID(UUID.randomUUID().toString()) // give the key a unique ID (optional)\n                     .issueTime(new Date()) // issued-at timestamp (optional)\n                     .generate()))\n                 \n-                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX().decodeToString()))\n+                 ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n                  _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n"
                },
                {
                    "date": 1697702569666,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"ecKey$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702575807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"ecKey$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702587114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702593538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702603422,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length = \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702609298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length = \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${} \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702615301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${} \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey} \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702625619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey} \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey.decodeToString()} \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702631882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey.decodeToString()} \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey.decodeToString().size} \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697702809838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey.decodeToString().} \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"$ecKey - length = ${ecKey.decodeToString()} \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                },
                {
                    "date": 1697705443308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n                 \n                  ecKey <- EitherT.right(IO(keyPair.toPublicJWK.getX()))\n                  pk <- EitherT.right(IO(Crypto.encodeToBase58(ecKey.decode)))\n \n-                 _ <- EitherT.right(IO.println(s\"${new String(ecKey.toString())} - length = ${ecKey.decodeToString().size} \\n$pk - length: ${pk.size}\"))\n+                 _ <- EitherT.right(IO.println(s\"${new String(ecKey.toString())} - length = ${ecKey.toString().size} \\n$pk - length: ${pk.size}\"))\n                  json <- EitherT(IO(parse(keyPair.toPublicJWK().toJSONString())))\n                  _ <- EitherT.right(IO.println(json.spaces2))\n             }\n                 yield keyPair).value\n"
                }
            ],
            "date": 1697636882210,
            "name": "Commit-0",
            "content": "object CryptoSpec  {\n  \n}\n"
        }
    ]
}