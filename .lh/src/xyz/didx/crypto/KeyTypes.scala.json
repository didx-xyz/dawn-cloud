{
    "sourceFile": "src/xyz/didx/crypto/KeyTypes.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 9,
            "patches": [
                {
                    "date": 1698137207226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698137212419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import com.nimbusds.jose.{JWEAlgorithm, JWSAlgorithm}\n import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\n import java.security.spec.ECPoint\n \n+\n object KeyTypes {\n \n   // Ed25519 Key\n   def createEd25519KeyPair(): KeyPair[EdDSAPublicKey, EdDSAPrivateKey] = {\n"
                },
                {
                    "date": 1698137219846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,6 @@\n+\n+\n import com.nimbusds.jose.crypto.Ed25519Signer\n import com.nimbusds.jose.crypto.X25519Decrypter\n import com.nimbusds.jose.crypto.X25519Encrypter\n import com.nimbusds.jose.crypto.X25519KeyAgreement\n"
                },
                {
                    "date": 1698137224884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n \n-\n+package xyz.didx.crypto\n import com.nimbusds.jose.crypto.Ed25519Signer\n import com.nimbusds.jose.crypto.X25519Decrypter\n import com.nimbusds.jose.crypto.X25519Encrypter\n import com.nimbusds.jose.crypto.X25519KeyAgreement\n"
                },
                {
                    "date": 1698137281574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,10 @@\n import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\n import java.security.spec.ECPoint\n \n \n+\n+\n object KeyTypes {\n \n   // Ed25519 Key\n   def createEd25519KeyPair(): KeyPair[EdDSAPublicKey, EdDSAPrivateKey] = {\n"
                },
                {
                    "date": 1698138198851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,13 @@\n import com.nimbusds.jose.{JWEAlgorithm, JWSAlgorithm}\n import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\n import java.security.spec.ECPoint\n \n+enum KeyType:\n+  case Ed25519Key(keyPair: KeyPair[EdDSAPublicKey, EdDSAPrivateKey])\n+  case X25519Key(keyPair: KeyPair[X25519PublicJWK, X25519PrivateJWK])\n+  case RSAKey(keyPair: KeyPair[RSAKey, RSAKey])\n+  case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n \n \n object KeyTypes {\n"
                },
                {
                    "date": 1698138233470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import com.nimbusds.jose.crypto.Ed25519Signer\n import com.nimbusds.jose.crypto.X25519Decrypter\n import com.nimbusds.jose.crypto.X25519Encrypter\n import com.nimbusds.jose.crypto.X25519KeyAgreement\n-import com.nimbusds.jose.jwk._\n+import com.nimbusds.jose.jwk.*\n import com.nimbusds.jose.{JWEAlgorithm, JWSAlgorithm}\n import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\n import java.security.spec.ECPoint\n \n"
                },
                {
                    "date": 1698138286332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,45 +15,45 @@\n   case RSAKey(keyPair: KeyPair[RSAKey, RSAKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n \n-\n object KeyTypes {\n \n   // Ed25519 Key\n-  def createEd25519KeyPair(): KeyPair[EdDSAPublicKey, EdDSAPrivateKey] = {\n+  def createEd25519KeyPair(): KeyType = {\n     val keyPair = KeyPair.generateKeyPair(JWSAlgorithm.EdDSA)\n-    KeyPair(\n+    KeyType.Ed25519Key(\n       keyPair.toPublicJWK.asInstanceOf[EdDSAPublicKey],\n       keyPair.toPrivateJWK.asInstanceOf[EdDSAPrivateKey]\n     )\n   }\n \n   // X25519 Key\n-  def createX25519KeyPair(): KeyPair[X25519PublicJWK, X25519PrivateJWK] = {\n+  def createX25519KeyPair(): KeyType = {\n     val keyPair = KeyPair.generateKeyPair(JWEAlgorithm.ECDH_ES_A256KW)\n-    KeyPair(\n+    KeyType.X25519Key(\n       keyPair.toPublicJWK.asInstanceOf[X25519PublicJWK],\n       keyPair.toPrivateJWK.asInstanceOf[X25519PrivateJWK]\n     )\n   }\n \n   // RSA Key\n-  def createRSAKeyPair(): KeyPair[RSAKey, RSAKey] = {\n+  def createRSAKeyPair(): KeyType = {\n     val keyPair = KeyPair.generateKeyPair(JWSAlgorithm.RS256)\n-    KeyPair(\n+    KeyType.RSAKey(\n       keyPair.toPublicJWK.asInstanceOf[RSAKey],\n       keyPair.toPrivateJWK.asInstanceOf[RSAKey]\n     )\n   }\n \n   // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair]): OctetKeyPair = {\n+  def createEllipticCurveKey(curve: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair]): KeyType = {\n     val keyPair = new OctetKeyPair.Builder(Curve.parse(curve), publicKey)\n       .privateKey(privateKey.orNull)\n       .build()\n-    keyPair\n+    KeyType.EllipticCurveKey(curve, publicKey, privateKey)\n   }\n+}\n \n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519KeyPair()\n     val x25519KeyPair = createX25519KeyPair()\n"
                },
                {
                    "date": 1698138301925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,10 +51,10 @@\n       .privateKey(privateKey.orNull)\n       .build()\n     KeyType.EllipticCurveKey(curve, publicKey, privateKey)\n   }\n-}\n \n+\n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519KeyPair()\n     val x25519KeyPair = createX25519KeyPair()\n     val rsaKeyPair = createRSAKeyPair()\n"
                },
                {
                    "date": 1698138352853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n   case RSAKey(keyPair: KeyPair[RSAKey, RSAKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n \n-object KeyTypes {\n+object KeyType {\n \n   // Ed25519 Key\n   def createEd25519KeyPair(): KeyType = {\n     val keyPair = KeyPair.generateKeyPair(JWSAlgorithm.EdDSA)\n"
                }
            ],
            "date": 1698137207226,
            "name": "Commit-0",
            "content": "import com.nimbusds.jose.crypto.Ed25519Signer\nimport com.nimbusds.jose.crypto.X25519Decrypter\nimport com.nimbusds.jose.crypto.X25519Encrypter\nimport com.nimbusds.jose.crypto.X25519KeyAgreement\nimport com.nimbusds.jose.jwk._\nimport com.nimbusds.jose.{JWEAlgorithm, JWSAlgorithm}\nimport java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\nimport java.security.spec.ECPoint\n\nobject KeyTypes {\n\n  // Ed25519 Key\n  def createEd25519KeyPair(): KeyPair[EdDSAPublicKey, EdDSAPrivateKey] = {\n    val keyPair = KeyPair.generateKeyPair(JWSAlgorithm.EdDSA)\n    KeyPair(\n      keyPair.toPublicJWK.asInstanceOf[EdDSAPublicKey],\n      keyPair.toPrivateJWK.asInstanceOf[EdDSAPrivateKey]\n    )\n  }\n\n  // X25519 Key\n  def createX25519KeyPair(): KeyPair[X25519PublicJWK, X25519PrivateJWK] = {\n    val keyPair = KeyPair.generateKeyPair(JWEAlgorithm.ECDH_ES_A256KW)\n    KeyPair(\n      keyPair.toPublicJWK.asInstanceOf[X25519PublicJWK],\n      keyPair.toPrivateJWK.asInstanceOf[X25519PrivateJWK]\n    )\n  }\n\n  // RSA Key\n  def createRSAKeyPair(): KeyPair[RSAKey, RSAKey] = {\n    val keyPair = KeyPair.generateKeyPair(JWSAlgorithm.RS256)\n    KeyPair(\n      keyPair.toPublicJWK.asInstanceOf[RSAKey],\n      keyPair.toPrivateJWK.asInstanceOf[RSAKey]\n    )\n  }\n\n  // Elliptic Curve Key (EC)\n  def createEllipticCurveKey(curve: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair]): OctetKeyPair = {\n    val keyPair = new OctetKeyPair.Builder(Curve.parse(curve), publicKey)\n      .privateKey(privateKey.orNull)\n      .build()\n    keyPair\n  }\n\n  def main(args: Array[String]): Unit = {\n    val ed25519KeyPair = createEd25519KeyPair()\n    val x25519KeyPair = createX25519KeyPair()\n    val rsaKeyPair = createRSAKeyPair()\n    val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n\n    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n    println(s\"X25519 Key Pair: $x25519KeyPair\")\n    println(s\"RSA Key Pair: $rsaKeyPair\")\n    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n  }\n}"
        }
    ]
}