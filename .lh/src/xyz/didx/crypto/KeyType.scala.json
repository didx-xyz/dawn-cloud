{
    "sourceFile": "src/xyz/didx/crypto/KeyType.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 195,
            "patches": [
                {
                    "date": 1698140143168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1698140160418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,6 @@\n \n package xyz.didx.crypto\n-import com.nimbusds.jose.crypto.Ed25519Signer\n-import com.nimbusds.jose.crypto.X25519Decrypter\n-import com.nimbusds.jose.crypto.X25519Encrypter\n-import com.nimbusds.jose.crypto.X25519KeyAgreement\n-import com.nimbusds.jose.jwk.*\n-import com.nimbusds.jose.{JWEAlgorithm, JWSAlgorithm}\n-import java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\n-import java.security.spec.ECPoint\n \n enum KeyType:\n   case Ed25519Key(keyPair: KeyPair[EdDSAPublicKey, EdDSAPrivateKey])\n   case X25519Key(keyPair: KeyPair[X25519PublicJWK, X25519PrivateJWK])\n@@ -58,11 +50,11 @@\n         keyGen.generate()\n     }\n     KeyType.EllipticCurveKey(curve.getName, keyPair.toPublicJWK.getECKey.toPublicKey.toECPoint, privateKey)\n   }\n-}\n \n \n+\n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519KeyPair()\n     val x25519KeyPair = createX25519KeyPair()\n     val rsaKeyPair = createRSAKeyPair()\n"
                },
                {
                    "date": 1698140168316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,19 @@\n \n package xyz.didx.crypto\n \n+import com.nimbusds.jose.jwk.gen._\n+import com.nimbusds.jose.jwk._\n+import java.security.spec.ECPoint\n+\n enum KeyType:\n   case Ed25519Key(keyPair: KeyPair[EdDSAPublicKey, EdDSAPrivateKey])\n   case X25519Key(keyPair: KeyPair[X25519PublicJWK, X25519PrivateJWK])\n   case RSAKey(keyPair: KeyPair[RSAKey, RSAKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n-import com.nimbusds.jose.jwk.gen._\n-import com.nimbusds.jose.jwk._\n-import java.security.spec.ECPoint\n \n+\n enum KeyType:\n   case Ed25519Key(key: EdDSAPublicKey)\n   case X25519Key(key: X25519PublicJWK)\n   case RSAKey(key: RSAKey)\n"
                },
                {
                    "date": 1698140178103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n \n package xyz.didx.crypto\n \n-import com.nimbusds.jose.jwk.gen._\n-import com.nimbusds.jose.jwk._\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n import java.security.spec.ECPoint\n \n enum KeyType:\n   case Ed25519Key(keyPair: KeyPair[EdDSAPublicKey, EdDSAPrivateKey])\n"
                },
                {
                    "date": 1698140198219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,8 @@\n import com.nimbusds.jose.jwk.gen.*\n import com.nimbusds.jose.jwk.*\n import java.security.spec.ECPoint\n \n-enum KeyType:\n-  case Ed25519Key(keyPair: KeyPair[EdDSAPublicKey, EdDSAPrivateKey])\n-  case X25519Key(keyPair: KeyPair[X25519PublicJWK, X25519PrivateJWK])\n-  case RSAKey(keyPair: KeyPair[RSAKey, RSAKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n \n \n enum KeyType:\n"
                },
                {
                    "date": 1698140305448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   case X25519Key(key: X25519PublicJWK)\n   case RSAKey(key: RSAKey)\n   case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n-object KeyTypes {\n+object KeyType {\n \n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n"
                },
                {
                    "date": 1698140406929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n \n \n \n \n+\n enum KeyType:\n   case Ed25519Key(key: EdDSAPublicKey)\n   case X25519Key(key: X25519PublicJWK)\n   case RSAKey(key: RSAKey)\n"
                },
                {
                    "date": 1698140418015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n \n import com.nimbusds.jose.jwk.gen.*\n import com.nimbusds.jose.jwk.*\n import java.security.spec.ECPoint\n+import java.security.interfaces\n \n \n \n \n-\n enum KeyType:\n   case Ed25519Key(key: EdDSAPublicKey)\n   case X25519Key(key: X25519PublicJWK)\n   case RSAKey(key: RSAKey)\n"
                },
                {
                    "date": 1698140565773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,15 @@\n \n import com.nimbusds.jose.jwk.gen.*\n import com.nimbusds.jose.jwk.*\n import java.security.spec.ECPoint\n-import java.security.interfaces\n+import java.security.interfaces.*\n \n \n \n \n enum KeyType:\n-  case Ed25519Key(key: EdDSAPublicKey)\n+  case Ed25519Key(key: DSAKey)\n   case X25519Key(key: X25519PublicJWK)\n   case RSAKey(key: RSAKey)\n   case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n"
                },
                {
                    "date": 1698140577530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n-  case X25519Key(key: X25519PublicJWK)\n+  case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n   case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n \n object KeyType {\n"
                },
                {
                    "date": 1698140592206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[EdDSAPublicKey])\n+    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698140615599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   // X25519 Key\n   def createX25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n     val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[X25519PublicJWK])\n+    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n   }\n \n   // RSA Key\n   def createRSAKey(): KeyType = {\n"
                },
                {
                    "date": 1698140651334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n   }\n \n   // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve, privateKey: Option[OctetKeyPair]): KeyType = {\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = privateKey match {\n       case Some(privateKey) =>\n         keyGen.generate().toBuilder().privateKey(privateKey).build()\n"
                },
                {
                    "date": 1698140670201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,15 +40,9 @@\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = privateKey match {\n-      case Some(privateKey) =>\n-        keyGen.generate().toBuilder().privateKey(privateKey).build()\n-      case None =>\n-        keyGen.generate()\n-    }\n-    KeyType.EllipticCurveKey(curve.getName, keyPair.toPublicJWK.getECKey.toPublicKey.toECPoint, privateKey)\n+   \n   }\n \n \n \n"
                },
                {
                    "date": 1698140762386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n+  case EllipticCurveKey(curveName: String, key)\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698140767549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: DSAKey)\n+  case X25519Key(key: DSAKey)\n+  case RSAKey(key: RSAKey)\n+  case EllipticCurveKey(curveName: String, key: ECKey)\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(2048)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519KeyPair()\n+    val x25519KeyPair = createX25519KeyPair()\n+    val rsaKeyPair = createRSAKeyPair()\n+    val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n+\n+    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698141551260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, key: ECKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKeyECKey)\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698141557351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKeyECKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n object KeyType {\n \n   // Ed25519 Key\n@@ -56,65 +56,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: DSAKey)\n-  case X25519Key(key: DSAKey)\n-  case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, key)\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(2048)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519KeyPair()\n-    val x25519KeyPair = createX25519KeyPair()\n-    val rsaKeyPair = createRSAKeyPair()\n-    val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n-\n-    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698141587678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n \n \n   def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519KeyPair()\n+    val ed25519KeyPair = createEd25519Key()\n     val x25519KeyPair = createX25519KeyPair()\n     val rsaKeyPair = createRSAKeyPair()\n     val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n \n"
                },
                {
                    "date": 1698141600333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n \n \n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519KeyPair()\n+    val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKeyPair()\n     val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n"
                },
                {
                    "date": 1698141606680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,9 +48,9 @@\n \n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519Key()\n     val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKeyPair()\n+    val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n"
                },
                {
                    "date": 1698141641051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519Key()\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n+    val ellipticCurveKey = createEllipticCurveKey(\"P-256\")\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n"
                },
                {
                    "date": 1698141681413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519Key()\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(\"P-256\")\n+    val ellipticCurveKey = createEllipticCurveKey()\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n"
                },
                {
                    "date": 1698141689576,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n   def main(args: Array[String]): Unit = {\n     val ed25519KeyPair = createEd25519Key()\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n"
                },
                {
                    "date": 1698141707745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n+    \n    \n   }\n \n \n"
                },
                {
                    "date": 1698141722711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n-    \n+    val keyPair = keyGen.generate()\n    \n   }\n \n \n"
                },
                {
                    "date": 1698141783827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+  case EllipticCurveKey(curveName: String, publickey: com.nimbusds.jose.jwk.ECKey)\n \n object KeyType {\n \n   // Ed25519 Key\n@@ -41,8 +41,9 @@\n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n+\n    \n   }\n \n \n"
                },
                {
                    "date": 1698141796467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publickey: com.nimbusds.jose.jwk.ECKey)\n+  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.)\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698141805092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: DSAKey)\n+  case X25519Key(key: DSAKey)\n+  case RSAKey(key: RSAKey)\n+  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.ECKey, privateKey: com.nimbusds.jose.jwk.ECKey)\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(2048)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698141814959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.ECKey, privateKey: com.nimbusds.jose.jwk.ECKey)\n+  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.ECPublicKey, privateKey: com.nimbusds.jose.jwk.ECKey)\n \n object KeyType {\n \n   // Ed25519 Key\n@@ -58,67 +58,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: DSAKey)\n-  case X25519Key(key: DSAKey)\n-  case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.)\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(2048)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698141866891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.ECPublicKey, privateKey: com.nimbusds.jose.jwk.ECKey)\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: com.nimbusds.jose.jwk.ECKey)\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698141879988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: com.nimbusds.jose.jwk.ECKey)\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: )\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698141887435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: )\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option)\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698141898125,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option)\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[]\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698141910807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n   case RSAKey(key: RSAKey)\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[]\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n@@ -41,8 +41,9 @@\n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n+    \n \n    \n   }\n \n"
                },
                {
                    "date": 1698141916834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n-    \n+    val publicKey = keyPair.toPublicJWK().asInstanceOf[ECKey].toECPublicKey()\n \n    \n   }\n \n"
                },
                {
                    "date": 1698141922764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,9 @@\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toPublicJWK().asInstanceOf[ECKey].toECPublicKey()\n+    val privateKey = keyPair.toPrivateJWK().asInstanceOf[ECKey].toECPrivateKey()\n \n    \n   }\n \n"
                },
                {
                    "date": 1698142776583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toPublicJWK().asInstanceOf[ECKey].toECPublicKey()\n+    val publicKey = keyPair.toPublicJWK().toECPublicKey()\n     val privateKey = keyPair.toPrivateJWK().asInstanceOf[ECKey].toECPrivateKey()\n \n    \n   }\n"
                },
                {
                    "date": 1698142798789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toPublicJWK().toECPublicKey()\n-    val privateKey = keyPair.toPrivateJWK().asInstanceOf[ECKey].toECPrivateKey()\n+    val privateKey = keyPair.toPrivateJWK()..toECPrivateKey()\n \n    \n   }\n \n"
                },
                {
                    "date": 1698142840886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toPublicJWK().toECPublicKey()\n-    val privateKey = keyPair.toPrivateJWK()..toECPrivateKey()\n+    val privateKey = keyPair.\n \n    \n   }\n \n"
                },
                {
                    "date": 1698142865472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toPublicJWK().toECPublicKey()\n-    val privateKey = keyPair.\n+    val privateKey = keyPair.toECPrivateKey()\n \n    \n   }\n \n"
                },
                {
                    "date": 1698142880393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toPublicJWK().toECPublicKey()\n+    val publicKey = keyPair.toECPublicKey()\n     val privateKey = keyPair.toECPrivateKey()\n \n    \n   }\n"
                },
                {
                    "date": 1698142890415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECPublicKey()\n     val privateKey = keyPair.toECPrivateKey()\n+    \n \n    \n   }\n \n"
                },
                {
                    "date": 1698142932446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,14 +38,14 @@\n     KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n   }\n \n   // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n+  def createEllipticCurveKey(curve: Curve, ): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECPublicKey()\n     val privateKey = keyPair.toECPrivateKey()\n-    \n+    KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n \n    \n   }\n \n"
                },
                {
                    "date": 1698142939877,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n   }\n \n   // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve, ): KeyType = {\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECPublicKey()\n     val privateKey = keyPair.toECPrivateKey()\n"
                },
                {
                    "date": 1698144447604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(key: RSAKey)\n+  case RSAKey(size: Int, key: RSAKey)\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144457065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(size: Int, key: RSAKey)\n+  case RSAKey(size: Int, publickey: RSAKey)\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144466248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(size: Int, publickey: RSAKey)\n+  case RSAKey(size: Int, publicKey: RSAPublicKey)\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144473246,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey)\n+  case RSAKey(size: Int, publicKey: RSAPublicKey, )\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144480823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey, )\n+  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivate)\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144487084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivate)\n+  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivate])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144497543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n   case X25519Key(key: DSAKey)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivate])\n+  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698144582728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(2048)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n+    KeyType.RSAKey(4096,keyPair.toPublicJWK.asInstanceOf[RSAKey])\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698144602879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(2048)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toPublicJWK.asInstanceOf[RSAKey])\n+    KeyType.RSAKey(4096,keyPair.toPub)\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698144618669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(2048)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toPub)\n+    KeyType.RSAKey(4096,keyPair.to)\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698144638596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(2048)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.to)\n+    KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698144840615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   }\n \n   // RSA Key\n   def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(2048)\n+    val keyGen = new RSAKeyGenerator(4096)\n     val keyPair = keyGen.generate()\n     KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n   }\n \n"
                },
                {
                    "date": 1698147120539,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+  //  println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698147147764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,10 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-  //  println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+  //  println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698147561862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+    KeyType.Ed25519Key(keyPair.toPublicJWK\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n@@ -57,9 +57,9 @@\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n-  //  println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698147567586,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK\n+    KeyType.Ed25519Key(keyPair.toPublicJWK)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698147586521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK)\n+    KeyType.Ed25519Key(keyPair.toPublicJWK.)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148232979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK.)\n+    KeyType.Ed25519Key(keyPair.toPublicJWK)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148259748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK)\n+    KeyType.Ed25519Key(keyPair.toPublicJ)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148265933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJ)\n+    KeyType.Ed25519Key(keyPair.to)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148286198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.to)\n+    KeyType.Ed25519Key(keyPair.toECKey())\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148292826,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toECKey())\n+    KeyType.Ed25519Key(keyPair.toECKey()))\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148300836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n-  case X25519Key(key: DSAKey)\n+  case X25519Key(key: ECke)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n"
                },
                {
                    "date": 1698148315129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: DSAKey)\n-  case X25519Key(key: ECke)\n+  case X25519Key(key: ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n"
                },
                {
                    "date": 1698148321584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: DSAKey)\n+  case Ed25519Key(key: ECKey)\n   case X25519Key(key: ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n"
                },
                {
                    "date": 1698148330704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toECKey()))\n+    KeyType.Ed25519Key(keyPair.toECKey())\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148389459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: ECKey)\n+  case Ed25519Key(key: java.secrityInECKey)\n   case X25519Key(key: ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n"
                },
                {
                    "date": 1698148397295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: java.secrityInECKey)\n+  case Ed25519Key(key: java.secrity.interfacesECKey)\n   case X25519Key(key: ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n"
                },
                {
                    "date": 1698148439619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: java.secrity.interfacesECKey)\n+  case Ed25519Key(key: java.security.interfaces.ECKey)\n   case X25519Key(key: ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n"
                },
                {
                    "date": 1698148454702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: java.security.interfaces.ECKey)\n-  case X25519Key(key: ECKey)\n+  case X25519Key(key: java.security.interfaces.ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n"
                },
                {
                    "date": 1698148462450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toECKey())\n+    KeyType.Ed25519Key(keyPair.toECKey().)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148492983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toECKey().)\n+    KeyType.Ed25519Key(keyPair.)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148498308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: java.security.interfaces.ECKey)\n+  case X25519Key(key: java.security.interfaces.ECKey)\n+  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECPublicKey()\n+    val privateKey = keyPair.toECPrivateKey()\n+    KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698148512279,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.)\n+    KeyType.Ed25519Key(keyPair.toPublicJWK())\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n@@ -61,70 +61,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: java.security.interfaces.ECKey)\n-  case X25519Key(key: java.security.interfaces.ECKey)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECPublicKey()\n-    val privateKey = keyPair.toECPrivateKey()\n-    KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698148518190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toPublicJWK())\n+    KeyType.Ed25519Key(keyPair.to)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148525652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.to)\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair().)\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148551263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n     val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair().)\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair())\n   }\n \n   // X25519 Key\n   def createX25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698148560628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: java.security.interfaces.ECKey)\n+  case X25519Key(key: java.security.interfaces.ECKey)\n+  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECPublicKey()\n+    val privateKey = keyPair.toECPrivateKey()\n+    KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698148578082,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   // X25519 Key\n   def createX25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n     val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n+    KeyType.X25519Key(keyPair.toOctet)\n   }\n \n   // RSA Key\n   def createRSAKey(): KeyType = {\n@@ -61,70 +61,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: java.security.interfaces.ECKey)\n-  case X25519Key(key: java.security.interfaces.ECKey)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[DSAKey])\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECPublicKey()\n-    val privateKey = keyPair.toECPrivateKey()\n-    KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698148583432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n   // X25519 Key\n   def createX25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n     val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctet)\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n   }\n \n   // RSA Key\n   def createRSAKey(): KeyType = {\n"
                },
                {
                    "date": 1698148599625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: java.security.interfaces.ECKey)\n+  case Ed25519Key(key: Octet)\n   case X25519Key(key: java.security.interfaces.ECKey)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n"
                },
                {
                    "date": 1698148607859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,10 +9,10 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: Octet)\n-  case X25519Key(key: java.security.interfaces.ECKey)\n+  case Ed25519Key(key: OctetKeyPair)\n+  case X25519Key(key: Octet)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n"
                },
                {
                    "date": 1698148897312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n-  case X25519Key(key: Octet)\n+  case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n@@ -42,9 +42,9 @@\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECPublicKey()\n-    val privateKey = keyPair.toECPrivateKey()\n+    val privateKey = keyPair.toECPKey()\n     KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n \n    \n   }\n"
                },
                {
                    "date": 1698148902467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECPublicKey()\n-    val privateKey = keyPair.toECPKey()\n+    //val privateKey = keyPair.toECPKey()\n     KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n \n    \n   }\n"
                },
                {
                    "date": 1698148910838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECPublicKey()\n     //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString(), publicKey, Some(privateKey))\n+    KeyType.EllipticCurveKey(curve.toString(), publicKey), Some(privateKey))\n \n    \n   }\n \n"
                },
                {
                    "date": 1698148925662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,11 +41,11 @@\n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECPublicKey()\n+    val publicKey = keyPair.toECKey()\n     //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString(), publicKey), Some(privateKey))\n+    KeyType.EllipticCurveKey(curve.toString(), publicKey)//, Some(privateKey))\n \n    \n   }\n \n"
                },
                {
                    "date": 1698148938507,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     val keyGen = new ECKeyGenerator(curve)\n     val keyPair = keyGen.generate()\n     val publicKey = keyPair.toECKey()\n     //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString(), publicKey)//, Some(privateKey))\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n \n    \n   }\n \n"
                },
                {
                    "date": 1698148977278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECPublicKey, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: ECKey, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698148983753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECKey, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698149011952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698149028957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: com.nECKey)//, privateKey: Option[ECPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698149035730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: com.nECKey)//, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: com.nimbus.ECKey)//, privateKey: Option[ECPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698149059567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: com.nimbus.ECKey)//, privateKey: Option[ECPrivateKey])\n   case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698149093477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: ECKey)//, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698149227788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(4096)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toRSAPublicKey(), Some(keyPair.toRSAPrivateKey()))\n+    KeyType.RSAKey(4096,keyPair.toRSAKey(), Some(keyPair.toRSAPrivateKey()))\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698149244117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(4096)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toRSAKey(), Some(keyPair.toRSAPrivateKey()))\n+    KeyType.RSAKey(4096,keyPair.toRSAKey())\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698149257608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n-  case EllipticCurveKey(curveName: String, publicKey: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698149272090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, publicKey: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n+  case RSAKey(size: Int, key: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698149293867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: RSAPublicKey, privateKey: Option[RSAPrivateKey])\n+  case RSAKey(size: Int, key: RSAKey, privateKey: Option[RSAPrivateKey])\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698149299755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: RSAKey, privateKey: Option[RSAPrivateKey])\n+  case RSAKey(size: Int, key: RSAKey,\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698149340410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: RSAKey,\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698149443607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(4096)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(4096,keyPair.toRSAKey())\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698149722454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(4096)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+    KeyType.RSAKey(2048,keyPair.toRSAKey().)\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698149814718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n   // RSA Key\n   def createRSAKey(): KeyType = {\n     val keyGen = new RSAKeyGenerator(4096)\n     val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey().)\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n   }\n \n   // Elliptic Curve Key (EC)\n   def createEllipticCurveKey(curve: Curve): KeyType = {\n"
                },
                {
                    "date": 1698149861266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,7 +59,7 @@\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n+    println(s\"Elliptic  Key: $ellipticCurveKey\")\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698149867960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,7 +59,7 @@\n \n     println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic  Key: $ellipticCurveKey\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150422867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n+    println(s\"Ed25519 Key Pair:\\n $ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698150429225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair:\\n $ed25519KeyPair\")\n+    println(s\"Ed25519 Key Pair:\\n ${ed25519KeyPair\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698150439107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair:\\n ${ed25519KeyPair\")\n+    println(s\"Ed25519 Key Pair:\\n ${ed25519KeyPair.}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698150469516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair:\\n ${ed25519KeyPair.}\")\n+    println(s\"Ed25519 Key Pair:\\n ${ed25519KeyPair}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698150477971,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair:\\n ${ed25519KeyPair}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698150555683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair)\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)//, privateKey: Option[ECPrivateKey])\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)/\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150565345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,12 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair)\n+  case Ed25519Key(key: OctetKeyPair):\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)/\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150576995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair):\n+    to\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150591151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,11 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair):\n-    to\n+    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n+      key.toPublicJWK()\n+    }\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150602973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair):\n+  case Ed25519Key(key: OctetKeyPair)\n     def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n       key.toPublicJWK()\n     }\n   case X25519Key(key: OctetKeyPair)\n"
                },
                {
                    "date": 1698150616518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) extends KeyType:\n+    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n+      key.toPublicJWK()\n+    }\n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150631303,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) extends KeyType:\n+  case Ed25519Key(key: OctetKeyPair) extends KeyType =\n     def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n       key.toPublicJWK()\n     }\n   case X25519Key(key: OctetKeyPair)\n@@ -64,73 +64,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair)\n-    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n-      key.toPublicJWK()\n-    }\n-  case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECKey()\n-    //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150638032,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,68 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) extends KeyType \n+    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n+      key.toPublicJWK()\n+    }\n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150644058,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) extends KeyType \n+  case Ed25519Key(key: OctetKeyPair) {}\n     def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n       key.toPublicJWK()\n     }\n   case X25519Key(key: OctetKeyPair)\n@@ -64,73 +64,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) extends KeyType =\n-    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n-      key.toPublicJWK()\n-    }\n-  case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECKey()\n-    //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150650944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,13 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) {}\n+  case Ed25519Key(key: OctetKeyPair) {\n     def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n       key.toPublicJWK()\n     }\n+  }\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150663513,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) {\n-    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n-      key.toPublicJWK()\n-    }\n-  }\n+  case Ed25519Key(key: OctetKeyPair) \n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150671761,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) \n+  case Ed25519Key(key: OctetKeyPair) =\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150678216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) =\n+  case Ed25519Key(key: OctetKeyPair) =>\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150683518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) =>\n+  case Ed25519Key(key: OctetKeyPair) => \n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150689407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,14 @@\n \n \n enum KeyType:\n   case Ed25519Key(key: OctetKeyPair) => \n+    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n+      key.toPublicJWK()\n+    }\n+    def toPrivateJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n+      key\n+    }\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n"
                },
                {
                    "date": 1698150704425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,65 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) =>\n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150900940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,13 @@\n \n \n \n enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) =>\n+  case Ed25519Key(key: OctetKeyPair) \n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+  \n \n object KeyType {\n \n   // Ed25519 Key\n@@ -61,76 +62,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) => \n-    def toPublicJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n-      key.toPublicJWK()\n-    }\n-    def toPrivateJWK(): com.nimbusds.jose.jwk.OctetKeyPair = {\n-      key\n-    }\n-  case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECKey()\n-    //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698150906618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,10 +13,11 @@\n   case Ed25519Key(key: OctetKeyPair) \n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-  \n \n+  def \n+\n object KeyType {\n \n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698150916966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n-  def \n+  def canEqual(that: Any): Boolean = ???\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150922702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n-  def canEqual(that: Any): Boolean = ???\n+  def \n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150929005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,14 @@\n   case X25519Key(key: OctetKeyPair)\n   case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n   case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n \n-  def \n+  def toPublicJWK(): JWK = this match {\n+    case Ed25519Key(key) => key.toPublicJWK()\n+    case X25519Key(key) => key.toPublicJWK()\n+    case RSAKey(size, key) => key.toPublicJWK()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n+  }\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150966816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     case X25519Key(key) => key.toPublicJWK()\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n+  \n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150975841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,10 +20,11 @@\n     case X25519Key(key) => key.toPublicJWK()\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n-  \n \n+  def toJava\n+\n object KeyType {\n \n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n"
                },
                {
                    "date": 1698150985626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n-  def toJava\n+  def toJava()\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698150996271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n-  def toJava()\n+  def toJava() ()\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698151005895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n-  def toJava() ()\n+  def toJava()\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698151023242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,14 @@\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n-  def toJava()\n+  def toJava(): java.security.Key = this match {\n+    case Ed25519Key(key) => key.toPublicJWK().toKey()\n+    case X25519Key(key) => key.toPublicJWK().toKey()\n+    case RSAKey(size, key) => key.toPublicJWK().toKey()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n+  }\n \n object KeyType {\n \n   // Ed25519 Key\n"
                },
                {
                    "date": 1698151047298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) \n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+  def toPublicJWK(): JWK = this match {\n+    case Ed25519Key(key) => key.toPublicJWK()\n+    case X25519Key(key) => key.toPublicJWK()\n+    case RSAKey(size, key) => key.toPublicJWK()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n+  }\n+\n+  def toJava(): java.security.Key = this match {\n+    case Ed25519Key(key) => key.toPublicJWK().()\n+    case X25519Key(key) => key.toPublicJWK().toKey()\n+    case RSAKey(size, key) => key.toPublicJWK().toKey()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n+  }\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698151052733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n   def toJava(): java.security.Key = this match {\n-    case Ed25519Key(key) => key.toPublicJWK().()\n+    case Ed25519Key(key) => key.toPublicJWK.()\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n   }\n@@ -75,84 +75,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) \n-  case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-\n-  def toPublicJWK(): JWK = this match {\n-    case Ed25519Key(key) => key.toPublicJWK()\n-    case X25519Key(key) => key.toPublicJWK()\n-    case RSAKey(size, key) => key.toPublicJWK()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n-  }\n-\n-  def toJava(): java.security.Key = this match {\n-    case Ed25519Key(key) => key.toPublicJWK().toKey()\n-    case X25519Key(key) => key.toPublicJWK().toKey()\n-    case RSAKey(size, key) => key.toPublicJWK().toKey()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n-  }\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECKey()\n-    //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698151132181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,10 @@\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n   def toJava(): java.security.Key = this match {\n-    case Ed25519Key(key) => key.toPublicJWK.()\n+    case Ed25519Key(key) => {\n+      key.toPublicJWK.\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n   }\n"
                },
                {
                    "date": 1698151142954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,10 @@\n   }\n \n   def toJava(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      key.toPublicJWK.\n+      key.toPublicJWK\n+    }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n   }\n"
                },
                {
                    "date": 1698151189178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   }\n \n   def toJava(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      key.toPublicJWK\n+      key.toPublicJWK.getDecodedD()\n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n"
                },
                {
                    "date": 1698151205715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   }\n \n   def toJava(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      key.toPublicJWK.getDecodedD()\n+      EDkey.toPublicJWK.getDecodedD()\n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n"
                },
                {
                    "date": 1698151242066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   }\n \n   def toJava(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      EDkey.toPublicJWK.getDecodedD()\n+      EdECPrivateKey.toPublicJWK.getDecodedD()\n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n"
                },
                {
                    "date": 1698151515762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,11 +21,11 @@\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n-  def toJava(): java.security.Key = this match {\n+  def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      EdECPrivateKey.toPublicJWK.getDecodedD()\n+      EdECPrivateKey..toPublicJWK.getDecodedD()\n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n"
                },
                {
                    "date": 1698151522478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,16 @@\n   }\n \n   def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      EdECPrivateKey..toPublicJWK.getDecodedD()\n+      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key), 0)\n+         val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n+\n+         // Get the elliptic curve parameter specification for the secp160r2 curve\n+         val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n+         val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n+         IO(keyFactory.generatePublic(publicKeySpec).asRight[Exception])\n+\n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n"
                },
                {
                    "date": 1698151529123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n          // Get the elliptic curve parameter specification for the secp160r2 curve\n          val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n          val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-         IO(keyFactory.generatePublic(publicKeySpec).asRight[Exception])\n+         keyFactory.generatePublic(publicKeySpec).asRight[Exception])\n \n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toKey()\n"
                },
                {
                    "date": 1698151535948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,88 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) \n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+  def toPublicJWK(): JWK = this match {\n+    case Ed25519Key(key) => key.toPublicJWK()\n+    case X25519Key(key) => key.toPublicJWK()\n+    case RSAKey(size, key) => key.toPublicJWK()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n+  }\n+\n+  def toJavaPublicKey(): java.security.Key = this match {\n+    case Ed25519Key(key) => {\n+      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key), 0)\n+         val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n+\n+         // Get the elliptic curve parameter specification for the secp160r2 curve\n+         val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n+         val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n+         keyFactory.generatePublic(publicKeySpec)\n+\n+    }\n+    case X25519Key(key) => key.toPublicJWK().toKey()\n+    case RSAKey(size, key) => key.toPublicJWK().toKey()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n+  }\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698151604851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n          keyFactory.generatePublic(publicKeySpec)\n \n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n-    case RSAKey(size, key) => key.toPublicJWK().toKey()\n+    case RSAKey(size, key) => key.toPublicJWK().toRSAKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n   }\n \n object KeyType {\n@@ -84,93 +84,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) \n-  case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-\n-  def toPublicJWK(): JWK = this match {\n-    case Ed25519Key(key) => key.toPublicJWK()\n-    case X25519Key(key) => key.toPublicJWK()\n-    case RSAKey(size, key) => key.toPublicJWK()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n-  }\n-\n-  def toJavaPublicKey(): java.security.Key = this match {\n-    case Ed25519Key(key) => {\n-      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key), 0)\n-         val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n-\n-         // Get the elliptic curve parameter specification for the secp160r2 curve\n-         val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n-         val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-         keyFactory.generatePublic(publicKeySpec).asRight[Exception])\n-\n-    }\n-    case X25519Key(key) => key.toPublicJWK().toKey()\n-    case RSAKey(size, key) => key.toPublicJWK().toKey()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n-  }\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECKey()\n-    //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698151626543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n          keyFactory.generatePublic(publicKeySpec)\n \n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n-    case RSAKey(size, key) => key.toPublicJWK().toRSAKey()\n+    case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n   }\n \n object KeyType {\n"
                },
                {
                    "date": 1698151676072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import com.nimbusds.jose.jwk.gen.*\n import com.nimbusds.jose.jwk.*\n import java.security.spec.ECPoint\n import java.security.interfaces.*\n+import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n \n \n \n \n"
                },
                {
                    "date": 1698151691916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n import com.nimbusds.jose.jwk.*\n import java.security.spec.ECPoint\n import java.security.interfaces.*\n import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n+import java.util.Base64\n \n \n \n \n"
                },
                {
                    "date": 1698151736642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   }\n \n   def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key), 0)\n+      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key.), 0)\n          val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n \n          // Get the elliptic curve parameter specification for the secp160r2 curve\n          val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n"
                },
                {
                    "date": 1698151744222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   }\n \n   def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key.), 0)\n+      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key.getDecodedX()), 0)\n          val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n \n          // Get the elliptic curve parameter specification for the secp160r2 curve\n          val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n"
                },
                {
                    "date": 1698151753226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   }\n \n   def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n-      val publicKeyParams = new Ed25519PublicKeyParameters(Base64.getUrlDecoder().decode(key.getDecodedX()), 0)\n+      val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX()), 0)\n          val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n \n          // Get the elliptic curve parameter specification for the secp160r2 curve\n          val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n"
                },
                {
                    "date": 1698151761096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n+import java.util.Base64\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) \n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+  def toPublicJWK(): JWK = this match {\n+    case Ed25519Key(key) => key.toPublicJWK()\n+    case X25519Key(key) => key.toPublicJWK()\n+    case RSAKey(size, key) => key.toPublicJWK()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n+  }\n+\n+  def toJavaPublicKey(): java.security.Key = this match {\n+    case Ed25519Key(key) => {\n+      val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX())\n+         val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n+\n+         // Get the elliptic curve parameter specification for the secp160r2 curve\n+         val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n+         val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n+         keyFactory.generatePublic(publicKeySpec)\n+\n+    }\n+    case X25519Key(key) => key.toPublicJWK().toKey()\n+    case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n+  }\n+\n+object KeyType {\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"RSA Key Pair: $rsaKeyPair\")\n+    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698151779151,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n import java.security.spec.ECPoint\n import java.security.interfaces.*\n import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n import java.util.Base64\n+import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n \n \n \n \n@@ -86,95 +87,5 @@\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n-}\n-\n-package xyz.didx.crypto\n-\n-import com.nimbusds.jose.jwk.gen.*\n-import com.nimbusds.jose.jwk.*\n-import java.security.spec.ECPoint\n-import java.security.interfaces.*\n-import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n-import java.util.Base64\n-\n-\n-\n-\n-enum KeyType:\n-  case Ed25519Key(key: OctetKeyPair) \n-  case X25519Key(key: OctetKeyPair)\n-  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n-  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n-\n-  def toPublicJWK(): JWK = this match {\n-    case Ed25519Key(key) => key.toPublicJWK()\n-    case X25519Key(key) => key.toPublicJWK()\n-    case RSAKey(size, key) => key.toPublicJWK()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n-  }\n-\n-  def toJavaPublicKey(): java.security.Key = this match {\n-    case Ed25519Key(key) => {\n-      val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX()), 0)\n-         val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n-\n-         // Get the elliptic curve parameter specification for the secp160r2 curve\n-         val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n-         val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-         keyFactory.generatePublic(publicKeySpec)\n-\n-    }\n-    case X25519Key(key) => key.toPublicJWK().toKey()\n-    case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n-  }\n-\n-object KeyType {\n-\n-  // Ed25519 Key\n-  def createEd25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n-  }\n-\n-  // X25519 Key\n-  def createX25519Key(): KeyType = {\n-    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n-    val keyPair = keyGen.generate()\n-    KeyType.X25519Key(keyPair.toOctetKeyPair())\n-  }\n-\n-  // RSA Key\n-  def createRSAKey(): KeyType = {\n-    val keyGen = new RSAKeyGenerator(4096)\n-    val keyPair = keyGen.generate()\n-    KeyType.RSAKey(2048,keyPair.toRSAKey())\n-  }\n-\n-  // Elliptic Curve Key (EC)\n-  def createEllipticCurveKey(curve: Curve): KeyType = {\n-    val keyGen = new ECKeyGenerator(curve)\n-    val keyPair = keyGen.generate()\n-    val publicKey = keyPair.toECKey()\n-    //val privateKey = keyPair.toECPKey()\n-    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n-\n-   \n-  }\n-\n-\n-\n-  def main(args: Array[String]): Unit = {\n-    val ed25519KeyPair = createEd25519Key()\n-    val x25519KeyPair = createX25519Key()\n-    val rsaKeyPair = createRSAKey()\n-    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n-\n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n-  }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698151789848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,14 +27,14 @@\n \n   def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n       val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX())\n-         val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n+        val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n \n-         // Get the elliptic curve parameter specification for the secp160r2 curve\n-         val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n-         val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-         keyFactory.generatePublic(publicKeySpec)\n+        // Get the elliptic curve parameter specification for the secp160r2 curve\n+        val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n+        val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n+        keyFactory.generatePublic(publicKeySpec)\n \n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n"
                },
                {
                    "date": 1698151822757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import java.security.interfaces.*\n import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n import java.util.Base64\n import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n+import org.bouncycastle.jcajce.provider.symmetric.DES.KeyFactory\n \n \n \n \n@@ -27,14 +28,14 @@\n \n   def toJavaPublicKey(): java.security.Key = this match {\n     case Ed25519Key(key) => {\n       val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX())\n-        val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n+      val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n \n-        // Get the elliptic curve parameter specification for the secp160r2 curve\n-        val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n-        val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-        keyFactory.generatePublic(publicKeySpec)\n+      // Get the elliptic curve parameter specification for the secp160r2 curve\n+      val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n+      val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n+      keyFactory.generatePublic(publicKeySpec)\n \n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n"
                },
                {
                    "date": 1698151836205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n import java.security.interfaces.*\n import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n import java.util.Base64\n import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n-import org.bouncycastle.jcajce.provider.symmetric.DES.KeyFactory\n \n \n \n \n"
                },
                {
                    "date": 1698151851432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,9 @@\n import java.security.interfaces.*\n import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n import java.util.Base64\n import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n+import java.security.KeyFactory\n \n \n \n \n"
                },
                {
                    "date": 1698151868745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n import java.util.Base64\n import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n import java.security.KeyFactory\n+import java.security.spec.X509EncodedKeySpec\n \n \n \n \n"
                },
                {
                    "date": 1698151904624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n     }\n     case X25519Key(key) => key.toPublicJWK().toKey()\n     case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n-    case EllipticCurveKey(curveName, key) => key.toPublicJWK().toKey()\n+    case EllipticCurveKey(curveName, key) => key.toEC\n   }\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698151964661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,11 +37,11 @@\n       val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n       keyFactory.generatePublic(publicKeySpec)\n \n     }\n-    case X25519Key(key) => key.toPublicJWK().toKey()\n+    case X25519Key(key) => \n     case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n-    case EllipticCurveKey(curveName, key) => key.toEC\n+    case EllipticCurveKey(curveName, key) => key.toECPublicKey()\n   }\n \n object KeyType {\n \n"
                },
                {
                    "date": 1698152000598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,12 +34,12 @@\n \n       // Get the elliptic curve parameter specification for the secp160r2 curve\n       val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n       val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-      keyFactory.generatePublic(publicKeySpec)\n+      keyFactory.generatePublic(publicKeySpec).\n \n     }\n-    case X25519Key(key) => \n+    case X25519Key(key) => ???\n     case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n     case EllipticCurveKey(curveName, key) => key.toECPublicKey()\n   }\n \n"
                },
                {
                    "date": 1698152009748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n       // Get the elliptic curve parameter specification for the secp160r2 curve\n       val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n       val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n-      keyFactory.generatePublic(publicKeySpec).\n+      keyFactory.generatePublic(publicKeySpec)\n \n     }\n     case X25519Key(key) => ???\n     case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n"
                },
                {
                    "date": 1698152077934,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152085897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152101951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152111420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toPublicJWK()}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152125683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toPublicJWK()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.()}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152148662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJava}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152154950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJava}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey(}\")\n     println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152168902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,10 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey(}\")\n-    println(s\"X25519 Key Pair: $x25519KeyPair\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey}\")\n+   / println(s\"X25519 Key Pair: $x25519KeyPair\")\n     println(s\"RSA Key Pair: $rsaKeyPair\")\n     println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698152176128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n     println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey}\")\n-   / println(s\"X25519 Key Pair: $x25519KeyPair\")\n-    println(s\"RSA Key Pair: $rsaKeyPair\")\n-    println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+   // println(s\"X25519 Key Pair: $x25519KeyPair\")\n+   // println(s\"RSA Key Pair: $rsaKeyPair\")\n+   // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1698152188253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152201406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     case RSAKey(size, key) => key.toPublicJWK()\n     case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n   }\n \n-  def toJavaPublicKey(): java.security.Key = this match {\n+  def toJavaPublicKey: java.security.Key = this match {\n     case Ed25519Key(key) => {\n       val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX())\n       val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n \n"
                },
                {
                    "date": 1698152212648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152273661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,8 +43,9 @@\n     case EllipticCurveKey(curveName, key) => key.toECPublicKey()\n   }\n \n object KeyType {\n+  \n \n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n"
                },
                {
                    "date": 1698152286779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import java.util.Base64\n import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n import java.security.KeyFactory\n import java.security.spec.X509EncodedKeySpec\n+import java.security.Security\n \n \n \n \n@@ -43,9 +44,9 @@\n     case EllipticCurveKey(curveName, key) => key.toECPublicKey()\n   }\n \n object KeyType {\n-  \n+  Security.addProvider(new BouncyCastleProvider())\n \n   // Ed25519 Key\n   def createEd25519Key(): KeyType = {\n     val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n"
                },
                {
                    "date": 1698152298270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n import java.security.KeyFactory\n import java.security.spec.X509EncodedKeySpec\n import java.security.Security\n+import org.bouncycastle.jce.provider.BouncyCastleProvider\n \n \n \n \n"
                },
                {
                    "date": 1698152391044,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey.}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152429705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey.}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey.getEncoded()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152461714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${ed25519KeyPair.toJavaPublicKey.getEncoded()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Baseed25519KeyPair.toJavaPublicKey.getEncoded()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152470325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Baseed25519KeyPair.toJavaPublicKey.getEncoded()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().toJavaPublicKey.getEncoded()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152493597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().toJavaPublicKey.getEncoded()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString().toJavaPublicKey.getEncoded()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152513268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString().toJavaPublicKey.getEncoded()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString(.toJavaPublicKey.getEncoded()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152535310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString(.toJavaPublicKey.getEncoded()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString(ed.toJavaPublicKey.getEncoded()}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698152546229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     val x25519KeyPair = createX25519Key()\n     val rsaKeyPair = createRSAKey()\n     val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n \n-    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString(ed25519KeyPair.toJavaPublicKey.getEncoded()}\")\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${Base64.getEncoder().encodeToString(ed25519KeyPair.toJavaPublicKey.getEncoded())}\")\n    // println(s\"X25519 Key Pair: $x25519KeyPair\")\n    // println(s\"RSA Key Pair: $rsaKeyPair\")\n    // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n   }\n"
                },
                {
                    "date": 1698153040055,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,96 @@\n+\n+package xyz.didx.crypto\n+\n+import com.nimbusds.jose.jwk.gen.*\n+import com.nimbusds.jose.jwk.*\n+import java.security.spec.ECPoint\n+import java.security.interfaces.*\n+import org.bouncycastle.crypto.params.Ed25519PublicKeyParameters\n+import java.util.Base64\n+import org.bouncycastle.crypto.util.SubjectPublicKeyInfoFactory\n+import java.security.KeyFactory\n+import java.security.spec.X509EncodedKeySpec\n+import java.security.Security\n+import org.bouncycastle.jce.provider.BouncyCastleProvider\n+\n+\n+\n+\n+enum KeyType:\n+  case Ed25519Key(key: OctetKeyPair) \n+  case X25519Key(key: OctetKeyPair)\n+  case RSAKey(size: Int, key: com.nimbusds.jose.jwk.RSAKey)\n+  case EllipticCurveKey(curveName: String, key: com.nimbusds.jose.jwk.ECKey)\n+\n+  def toPublicJWK(): JWK = this match {\n+    case Ed25519Key(key) => key.toPublicJWK()\n+    case X25519Key(key) => key.toPublicJWK()\n+    case RSAKey(size, key) => key.toPublicJWK()\n+    case EllipticCurveKey(curveName, key) => key.toPublicJWK()\n+  }\n+\n+  def toJavaPublicKey: java.security.Key = this match {\n+    case Ed25519Key(key) => {\n+      val publicKeyParams = new Ed25519PublicKeyParameters(key.getDecodedX())\n+      val subjectPublicKeyInfo = SubjectPublicKeyInfoFactory.createSubjectPublicKeyInfo(publicKeyParams)\n+\n+      // Get the elliptic curve parameter specification for the secp160r2 curve\n+      val keyFactory = KeyFactory.getInstance(\"Ed25519\", \"BC\")\n+      val publicKeySpec = new X509EncodedKeySpec(subjectPublicKeyInfo.getEncoded())\n+      keyFactory.generatePublic(publicKeySpec)\n+\n+    }\n+    case X25519Key(key) => ???\n+    case RSAKey(size, key) => key.toPublicJWK().toRSAPublicKey()\n+    case EllipticCurveKey(curveName, key) => key.toECPublicKey()\n+  }\n+\n+object KeyType {\n+  Security.addProvider(new BouncyCastleProvider())\n+\n+  // Ed25519 Key\n+  def createEd25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.Ed25519Key(keyPair.toOctetKeyPair)\n+  }\n+\n+  // X25519 Key\n+  def createX25519Key(): KeyType = {\n+    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n+    val keyPair = keyGen.generate()\n+    KeyType.X25519Key(keyPair.toOctetKeyPair())\n+  }\n+\n+  // RSA Key\n+  def createRSAKey(): KeyType = {\n+    val keyGen = new RSAKeyGenerator(4096)\n+    val keyPair = keyGen.generate()\n+    KeyType.RSAKey(2048,keyPair.toRSAKey())\n+  }\n+\n+  // Elliptic Curve Key (EC)\n+  def createEllipticCurveKey(curve: Curve): KeyType = {\n+    val keyGen = new ECKeyGenerator(curve)\n+    val keyPair = keyGen.generate()\n+    val publicKey = keyPair.toECKey()\n+    //val privateKey = keyPair.toECPKey()\n+    KeyType.EllipticCurveKey(curve.toString, publicKey)//, Some(privateKey))\n+\n+   \n+  }\n+\n+\n+\n+  def main(args: Array[String]): Unit = {\n+    val ed25519KeyPair = createEd25519Key()\n+    val x25519KeyPair = createX25519Key()\n+    val rsaKeyPair = createRSAKey()\n+    val ellipticCurveKey = createEllipticCurveKey(Curve.P_384)\n+\n+    println(s\"Ed25519 Key Pair: ${ed25519KeyPair}\\n ${new StringBase64.getDecoder.decode(ed25519KeyPair.toJavaPublicKey.getEncoded())}\")\n+   // println(s\"X25519 Key Pair: $x25519KeyPair\")\n+   // println(s\"RSA Key Pair: $rsaKeyPair\")\n+   // println(s\"Elliptic Key Pair: $ellipticCurveKey\")\n+  }\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1698140143168,
            "name": "Commit-0",
            "content": "\npackage xyz.didx.crypto\nimport com.nimbusds.jose.crypto.Ed25519Signer\nimport com.nimbusds.jose.crypto.X25519Decrypter\nimport com.nimbusds.jose.crypto.X25519Encrypter\nimport com.nimbusds.jose.crypto.X25519KeyAgreement\nimport com.nimbusds.jose.jwk.*\nimport com.nimbusds.jose.{JWEAlgorithm, JWSAlgorithm}\nimport java.security.interfaces.{RSAPrivateKey, RSAPublicKey}\nimport java.security.spec.ECPoint\n\nenum KeyType:\n  case Ed25519Key(keyPair: KeyPair[EdDSAPublicKey, EdDSAPrivateKey])\n  case X25519Key(keyPair: KeyPair[X25519PublicJWK, X25519PrivateJWK])\n  case RSAKey(keyPair: KeyPair[RSAKey, RSAKey])\n  case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n\nimport com.nimbusds.jose.jwk.gen._\nimport com.nimbusds.jose.jwk._\nimport java.security.spec.ECPoint\n\nenum KeyType:\n  case Ed25519Key(key: EdDSAPublicKey)\n  case X25519Key(key: X25519PublicJWK)\n  case RSAKey(key: RSAKey)\n  case EllipticCurveKey(curveName: String, publicKey: ECPoint, privateKey: Option[OctetKeyPair])\n\nobject KeyTypes {\n\n  // Ed25519 Key\n  def createEd25519Key(): KeyType = {\n    val keyGen = new OctetKeyPairGenerator(Curve.Ed25519)\n    val keyPair = keyGen.generate()\n    KeyType.Ed25519Key(keyPair.toPublicJWK.asInstanceOf[EdDSAPublicKey])\n  }\n\n  // X25519 Key\n  def createX25519Key(): KeyType = {\n    val keyGen = new OctetKeyPairGenerator(Curve.X25519)\n    val keyPair = keyGen.generate()\n    KeyType.X25519Key(keyPair.toPublicJWK.asInstanceOf[X25519PublicJWK])\n  }\n\n  // RSA Key\n  def createRSAKey(): KeyType = {\n    val keyGen = new RSAKeyGenerator(2048)\n    val keyPair = keyGen.generate()\n    KeyType.RSAKey(keyPair.toPublicJWK.asInstanceOf[RSAKey])\n  }\n\n  // Elliptic Curve Key (EC)\n  def createEllipticCurveKey(curve: Curve, privateKey: Option[OctetKeyPair]): KeyType = {\n    val keyGen = new ECKeyGenerator(curve)\n    val keyPair = privateKey match {\n      case Some(privateKey) =>\n        keyGen.generate().toBuilder().privateKey(privateKey).build()\n      case None =>\n        keyGen.generate()\n    }\n    KeyType.EllipticCurveKey(curve.getName, keyPair.toPublicJWK.getECKey.toPublicKey.toECPoint, privateKey)\n  }\n}\n\n\n  def main(args: Array[String]): Unit = {\n    val ed25519KeyPair = createEd25519KeyPair()\n    val x25519KeyPair = createX25519KeyPair()\n    val rsaKeyPair = createRSAKeyPair()\n    val ellipticCurveKey = createEllipticCurveKey(\"P-256\", new ECPoint(1, 2), None)\n\n    println(s\"Ed25519 Key Pair: $ed25519KeyPair\")\n    println(s\"X25519 Key Pair: $x25519KeyPair\")\n    println(s\"RSA Key Pair: $rsaKeyPair\")\n    println(s\"Elliptic Curve Key: $ellipticCurveKey\")\n  }\n}"
        }
    ]
}