{
    "sourceFile": "src/xyz/didx/didcomm/DIDDoc.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 45,
            "patches": [
                {
                    "date": 1696855447459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1696855454782,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,9 @@\n package xyz.didx.didcomm\n \n //import org.didcommx.didcomm.common.VerificationMaterial\n //import org.didcommx.didcomm.common.VerificationMethodType\n-import org.didcomm\n-\n-\n-x.didcomm.exceptions.DIDDocException\n+import org.xyz.didcomm.exceptions.DIDDocException\n import org.didcommx.didcomm.exceptions.DIDUrlNotFoundException\n import io.circe.*\n import io.circe.syntax._\n \n"
                },
                {
                    "date": 1696855544281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,9 @@\n package xyz.didx.didcomm\n \n //import org.didcommx.didcomm.common.VerificationMaterial\n //import org.didcommx.didcomm.common.VerificationMethodType\n-import org.xyz.didcomm.exceptions.DIDDocException\n-import org.didcommx.didcomm.exceptions.DIDUrlNotFoundException\n+\n import io.circe.*\n import io.circe.syntax._\n \n //import foundation.identity.did.VerificationRelationships\n"
                },
                {
                    "date": 1696856702059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n-  def findDIDCommService(id: String): Either[DIDDocException, Service] =\n+  def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n         v.find(_.id.toString() == id) match\n           case Some(v: Service) => Right(v)\n"
                },
                {
                    "date": 1696856708211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[DIDUrlNotFoundException, VerificationMethod] =\n+  ): Either[Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696856733457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(DIDUrlNotFoundException(id, did))\n+      case _ => Left(Errorid, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696856741669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Errorid, did))\n+      case _ => Left(Error(id, did)))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696856866297,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[Error, VerificationMethod] =\n+  ): Either[lang.Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696856882466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(id, did)))\n+      case _ => Left(lang.Error(id, did)))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696856902634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[lang.Error, VerificationMethod] =\n+  ): Either[.Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696856908053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[.Error, VerificationMethod] =\n+  ): Either[java.util.Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696856930359,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[java.util.Error, VerificationMethod] =\n+  ): Either[Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696857126621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(lang.Error(id, did)))\n+      case _ => Left(Error(id, did)))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857148129,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n //import org.didcommx.didcomm.common.VerificationMaterial\n //import org.didcommx.didcomm.common.VerificationMethodType\n \n-import io.circe.*\n+\n import io.circe.syntax._\n \n //import foundation.identity.did.VerificationRelationships\n import java.net.URI\n"
                },
                {
                    "date": 1696857170715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n //import org.didcommx.didcomm.common.VerificationMaterial\n //import org.didcommx.didcomm.common.VerificationMethodType\n \n \n-import io.circe.syntax._\n \n+\n //import foundation.identity.did.VerificationRelationships\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(id, did)))\n+      case _ => Left(Error(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857203789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(id, did))\n+      case _ => Left(Error(s\"id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857209292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(s\"id, did))\n+      case _ => Left(Error(s\"id, did\"))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857215541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(s\"id, did\"))\n+      case _ => Left(Error(s\"$id, did\"))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857319929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,10 +3,10 @@\n //import org.didcommx.didcomm.common.VerificationMaterial\n //import org.didcommx.didcomm.common.VerificationMethodType\n \n \n+import io.circe.syntax._\n \n-\n //import foundation.identity.did.VerificationRelationships\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(s\"$id, did\"))\n+      case _ => Left(Error(id, did)))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857327873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n \n //import org.didcommx.didcomm.common.VerificationMaterial\n //import org.didcommx.didcomm.common.VerificationMethodType\n \n-\n+import io.circe.*\n import io.circe.syntax._\n \n //import foundation.identity.did.VerificationRelationships\n import java.net.URI\n@@ -100,9 +100,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(Error(id, did)))\n+      case _ => Left(lang.Error(id, did)))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857333569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[Error, VerificationMethod] =\n+  ): Either[.Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696857346929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[.Error, VerificationMethod] =\n+  ): Either[lang.Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n"
                },
                {
                    "date": 1696857353101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,15 +94,15 @@\n ):\n \n   def findVerificationMethod(\n       id: String\n-  ): Either[lang.Error, VerificationMethod] =\n+  ): Either[Error, VerificationMethod] =\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(DIDUrlNotFoundException(id, did))\n-      case _ => Left(lang.Error(id, did)))\n+      case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857371669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,6 @@\n package xyz.didx.didcomm\n \n-//import org.didcommx.didcomm.common.VerificationMaterial\n-//import org.didcommx.didcomm.common.VerificationMethodType\n-\n-import io.circe.*\n-import io.circe.syntax._\n-\n //import foundation.identity.did.VerificationRelationships\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n"
                },
                {
                    "date": 1696857388374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(DIDUrlNotFoundException(id, did))\n+          case _                           => Left(Error(s\"$id, $did\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857403211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"$id, $did\"))\n+          case _                           => Left(Error(s\"Ver$id, $did\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857409526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"Ver$id, $did\"))\n+          case _                           => Left(Error(s\"VerificationMethod$id, $did\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857417647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethod$id, $did\"))\n+          case _                           => Left(Error(s\"VerificationMethodfor $id, $did\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857422722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethodfor $id, $did\"))\n+          case _                           => Left(Error(s\"VerificationMethod$id, $did\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857429018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethod$id, $did\"))\n+          case _                           => Left(Error(s\"VerificationMethod$id fo $did\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857437752,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethod$id fo $did\"))\n+          case _                           => Left(Error(s\"VerificationMethod$id for $did not found\"))\n       case _ => Left(DIDUrlNotFoundException(id, did))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857465892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(Error(s\"VerificationMethod$id for $did not found\"))\n-      case _ => Left(DIDUrlNotFoundException(id, did))\n+      case _ => LeftError(s\"VerificationMethod$id for $did not found\"))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857475146,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(Error(s\"VerificationMethod$id for $did not found\"))\n-      case _ => LeftError(s\"VerificationMethod$id for $did not found\"))\n+      case _ => LeftError(s\"VerificationMethod$id for $did not found\")\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857483779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(Error(s\"VerificationMethod$id for $did not found\"))\n-      case _ => LeftError(s\"VerificationMethod$id for $did not found\")\n+      case _ => LeftError(s\"VerificationMethod $id for $did not found\")\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857488909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethod$id for $did not found\"))\n+          case _                           => Left(Error(s\"VerificationMethod$ id for $did not found\"))\n       case _ => LeftError(s\"VerificationMethod $id for $did not found\")\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857498115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,9 +93,9 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethod$ id for $did not found\"))\n+          case _                           => Left(Error(s\"VerificationMethod $ id for $did not found\"))\n       case _ => LeftError(s\"VerificationMethod $id for $did not found\")\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n"
                },
                {
                    "date": 1696857530518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,17 +93,17 @@\n     verificationMethods match\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n-          case _                           => Left(Error(s\"VerificationMethod $ id for $did not found\"))\n+          case _                           => Left(Error(s\"VerificationMethod $id for $did not found\"))\n       case _ => LeftError(s\"VerificationMethod $id for $did not found\")\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n         v.find(_.id.toString() == id) match\n           case Some(v: Service) => Right(v)\n-          case _                => Left(DIDDocException(\"DIDComm service not found\"))\n+          case _                => Left(Error(\"DIDComm service not found\"))\n       case _ => Left(DIDDocException(\"DIDComm service not found\"))\n \n   override def toString: String =\n     s\"\"\"DIDDoc(\n"
                },
                {
                    "date": 1696857537654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       case Some(v: Service) =>\n         v.find(_.id.toString() == id) match\n           case Some(v: Service) => Right(v)\n           case _                => Left(Error(\"DIDComm service not found\"))\n-      case _ => Left(DIDDocException(\"DIDComm service not found\"))\n+      case _ => Left(Error(\"DIDComm service not found\"))\n \n   override def toString: String =\n     s\"\"\"DIDDoc(\n        |  did=$did,\n"
                },
                {
                    "date": 1696857550377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(Error(s\"VerificationMethod $id for $did not found\"))\n-      case _ => LeftError(s\"VerificationMethod $id for $did not found\")\n+      case _ => Left(Error(s\"VerificationMethod $id for $did not found\")\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857594466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,11 @@\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n import scala.util.matching.Regex\n+val didDocJson = didDoc.asJson\n \n+\n //import foundation.identity.did.VerificationMethod\n \n /** DID DOC (https://www.w3.org/TR/did-core/#dfn-did-documents)\n   * @property\n@@ -94,9 +96,9 @@\n       case Some(v) =>\n         v.find(_.id == id) match\n           case Some(v: VerificationMethod) => Right(v)\n           case _                           => Left(Error(s\"VerificationMethod $id for $did not found\"))\n-      case _ => Left(Error(s\"VerificationMethod $id for $did not found\")\n+      case _ => Left(Error(s\"VerificationMethod $id for $did not found\"))\n \n   def findDIDCommService(id: String): Either[Error, Service] =\n     services match\n       case Some(v: Service) =>\n"
                },
                {
                    "date": 1696857602114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,8 @@\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n import scala.util.matching.Regex\n-val didDocJson = didDoc.asJson\n \n \n //import foundation.identity.did.VerificationMethod\n \n"
                },
                {
                    "date": 1696857669131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n import scala.util.matching.Regex\n+import io.circe\n \n \n //import foundation.identity.did.VerificationMethod\n \n"
                },
                {
                    "date": 1696857675704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n import scala.util.matching.Regex\n-import io.circe\n+import io.circe.synta\n \n \n //import foundation.identity.did.VerificationMethod\n \n"
                },
                {
                    "date": 1696857681668,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import java.net.URI\n import xyz.didx.didcomm.VerificationMethodType\n import xyz.didx.didcomm.DIDCodec\n import scala.util.matching.Regex\n-import io.circe.synta\n+import io.circe.syntax.EncoderOps\n \n \n //import foundation.identity.did.VerificationMethod\n \n"
                },
                {
                    "date": 1696925600616,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n   import DIDCodec.decodeDIDDoc\n \n   // def apply(did: String, controller: Option[String], alsoKnownAs: Option[Set[String]], verificationMethods: Option[Set[VerificationMethod]], keyAgreements: Option[Set[KeyAgreement]], authentications: Option[Set[Authentication]], assertionMethods: Option[Set[Assertion]], capabilityInvocations: Option[Set[CapabilityInvocation]], capabilityDelegations: Option[Set[CapabilityDelegation]], services: Option[Set[Service]]): DIDDoc = new DIDDoc(did, controller, alsoKnownAs, verificationMethods, keyAgreements, authentications, assertionMethods, capabilityInvocations, capabilityDelegations, services)\n \n-  def createDIDKeyDocument(\n+  def createDIDDocument(\n       did: String,\n       controller: String,\n       verificationMethod: VerificationMethod,\n       service: Service\n"
                },
                {
                    "date": 1697113527722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,26 +127,9 @@\n   import DIDCodec.decodeDIDDoc\n \n   // def apply(did: String, controller: Option[String], alsoKnownAs: Option[Set[String]], verificationMethods: Option[Set[VerificationMethod]], keyAgreements: Option[Set[KeyAgreement]], authentications: Option[Set[Authentication]], assertionMethods: Option[Set[Assertion]], capabilityInvocations: Option[Set[CapabilityInvocation]], capabilityDelegations: Option[Set[CapabilityDelegation]], services: Option[Set[Service]]): DIDDoc = new DIDDoc(did, controller, alsoKnownAs, verificationMethods, keyAgreements, authentications, assertionMethods, capabilityInvocations, capabilityDelegations, services)\n \n-  def createDIDDocument(\n-      did: String,\n-      controller: String,\n-      verificationMethod: VerificationMethod,\n-      service: Service\n-  ): DIDDoc =\n-    DIDDoc(\n-      did,\n-      Some(controller),\n-      None,\n-      Some(Set(verificationMethod)),\n-      None,\n-      None,\n-      None,\n-      None,\n-      None,\n-      Some(Set(service))\n-    )\n+ \n   def addContext(didDoc: DIDDoc, contexts: List[String]): DIDDoc =\n     val didDocJson = didDoc.asJson\n     val didDocJsonWithContext =\n       didDocJson.mapObject(_.add(\"@context\", contexts.asJson))\n"
                }
            ],
            "date": 1696855447459,
            "name": "Commit-0",
            "content": "package xyz.didx.didcomm\n\n//import org.didcommx.didcomm.common.VerificationMaterial\n//import org.didcommx.didcomm.common.VerificationMethodType\nimport org.didcomm\n\n\nx.didcomm.exceptions.DIDDocException\nimport org.didcommx.didcomm.exceptions.DIDUrlNotFoundException\nimport io.circe.*\nimport io.circe.syntax._\n\n//import foundation.identity.did.VerificationRelationships\nimport java.net.URI\nimport xyz.didx.didcomm.VerificationMethodType\nimport xyz.didx.didcomm.DIDCodec\nimport scala.util.matching.Regex\n\n//import foundation.identity.did.VerificationMethod\n\n/** DID DOC (https://www.w3.org/TR/did-core/#dfn-did-documents)\n  * @property\n  *   did a DID for the given DID Doc\n  * @property\n  *   keyAgreements Key IDs (DID URLs) of all verification methods from the 'keyAgreement'\n  *   verification relationship in this DID DOC. See\n  *   https://www.w3.org/TR/did-core/#verification-methods.\n  * @property\n  *   authentications Key IDs (DID URLs) of all verification methods from the 'authentication'\n  *   verification relationship in this DID DOC. See https://www.w3.org/TR/did-core/#authentication.\n  * @property\n  *   verificationMethods Returns all local verification methods including embedded to key agreement\n  *   and authentication sections. See https://www.w3.org/TR/did-core/#verification-methods.\n  * @property\n  *   didCommServices All services of 'DIDCommMessaging' type in this DID DOC. Empty list is\n  *   returned if there are no services of 'DIDCommMessaging' type. See\n  *   https://www.w3.org/TR/did-core/#services and\n  *   https://identity.foundation/didcomm-messaging/spec/#did-document-service-endpoint.\n  */\n\nobject DIDTypes {\n  opaque type DIDUrl           = String\n  opaque type Method           = String\n  opaque type MethodSpecificId = String\n\n  private val methodNamePattern: Regex       = \"\"\"[a-z0-9]+\"\"\".r\n  private val methodSpecificIdPattern: Regex = \"\"\"(:[a-z0-9]+)*[a-z0-9]+\"\"\".r\n  private val supportedMethods: List[String] =\n    List(\"example\", \"ion\", \"key\", \"indy\", \"web\", \"prism\")\n  def createMethodName(value: String): Option[Method] =\n    methodNamePattern.findFirstIn(value) match {\n      case Some(m) if supportedMethods.contains(m) => Some(m)\n      case _                                       => None\n    }\n\n  def createMethodSpecificId(value: String): Option[MethodSpecificId] =\n    methodSpecificIdPattern.findFirstIn(value).map(_ => value)\n\n  def extractMethodName(value: String): Option[Method] =\n    value.split(\":\").tail.headOption.flatMap(createMethodName)\n  def extractMethodSpecificId(value: String): Option[MethodSpecificId] =\n    value.split(\":\").tail.tail.headOption.flatMap(createMethodSpecificId)\n  /*  def fromDIDUrl(didUrl: DIDUrl): Option[DID] =\n    for {\n      methodName <- extractMethodName(didUrl)\n      methodSpecificId <- extractMethodSpecificId(didUrl)\n    } yield DID(methodName, methodSpecificId) */\n  def fromDIDUrl(value: DIDUrl): Option[DID] =\n    value.split(\":\").toList match {\n      case \"did\" :: methodName :: methodSpecificId :: Nil =>\n        for {\n          methodName       <- createMethodName(methodName)\n          methodSpecificId <- createMethodSpecificId(methodSpecificId)\n        } yield DID(methodName, methodSpecificId)\n      case _ => None\n    }\n}\n\nimport DIDTypes._\n\ncase class DID(methodName: Method, methodSpecificId: MethodSpecificId) {\n  override def toString: String = s\"did:$methodName:$methodSpecificId \"\n  def toDIDUrl: DIDUrl          = toString.asInstanceOf[DIDUrl]\n\n}\n\ncase class DIDDoc(\n    did: String = \"\",\n    controller: Option[String] = None,\n    alsoKnownAs: Option[Set[String]] = None,\n    verificationMethods: Option[Set[VerificationMethod]] = None,\n    keyAgreements: Option[Set[KeyAgreement]] = None,\n    authentications: Option[Set[Authentication]] = None,\n    assertionMethods: Option[Set[Assertion]] = None,\n    capabilityInvocations: Option[Set[CapabilityInvocation]] = None,\n    capabilityDelegations: Option[Set[CapabilityDelegation]] = None,\n    services: Option[Set[Service]] = None\n):\n\n  def findVerificationMethod(\n      id: String\n  ): Either[DIDUrlNotFoundException, VerificationMethod] =\n    verificationMethods match\n      case Some(v) =>\n        v.find(_.id == id) match\n          case Some(v: VerificationMethod) => Right(v)\n          case _                           => Left(DIDUrlNotFoundException(id, did))\n      case _ => Left(DIDUrlNotFoundException(id, did))\n\n  def findDIDCommService(id: String): Either[DIDDocException, Service] =\n    services match\n      case Some(v: Service) =>\n        v.find(_.id.toString() == id) match\n          case Some(v: Service) => Right(v)\n          case _                => Left(DIDDocException(\"DIDComm service not found\"))\n      case _ => Left(DIDDocException(\"DIDComm service not found\"))\n\n  override def toString: String =\n    s\"\"\"DIDDoc(\n       |  did=$did,\n       |  controller=$controller,\n       |  alsoKnownAs=$alsoKnownAs,\n       |  verificationMethods=$verificationMethods,\n       |  keyAgreements=$keyAgreements,\n       |  authentications=$authentications,\n       |  assertionMethods=$assertionMethods,\n       |  capabilityInvocations=$capabilityInvocations,\n       |  capabilityDelegations=$capabilityDelegations,\n       |  services=$services\n       |)\"\"\".stripMargin\n\nobject DIDDoc:\n  import DIDCodec.*\n  import DIDCodec.encodeDIDDoc\n  import DIDCodec.decodeDIDDoc\n\n  // def apply(did: String, controller: Option[String], alsoKnownAs: Option[Set[String]], verificationMethods: Option[Set[VerificationMethod]], keyAgreements: Option[Set[KeyAgreement]], authentications: Option[Set[Authentication]], assertionMethods: Option[Set[Assertion]], capabilityInvocations: Option[Set[CapabilityInvocation]], capabilityDelegations: Option[Set[CapabilityDelegation]], services: Option[Set[Service]]): DIDDoc = new DIDDoc(did, controller, alsoKnownAs, verificationMethods, keyAgreements, authentications, assertionMethods, capabilityInvocations, capabilityDelegations, services)\n\n  def createDIDKeyDocument(\n      did: String,\n      controller: String,\n      verificationMethod: VerificationMethod,\n      service: Service\n  ): DIDDoc =\n    DIDDoc(\n      did,\n      Some(controller),\n      None,\n      Some(Set(verificationMethod)),\n      None,\n      None,\n      None,\n      None,\n      None,\n      Some(Set(service))\n    )\n  def addContext(didDoc: DIDDoc, contexts: List[String]): DIDDoc =\n    val didDocJson = didDoc.asJson\n    val didDocJsonWithContext =\n      didDocJson.mapObject(_.add(\"@context\", contexts.asJson))\n    didDocJsonWithContext.as[DIDDoc].getOrElse(didDoc)\n\n/** DID DOC Verification method. It can be used in such verification relationships as\n  * Authentication, KeyAgreement, etc. See https://www.w3.org/TR/did-core/#verification-methods.\n  */\ncase class VerificationMethod(\n    id: String,\n    `type`: VerificationMethodType,\n    verificationMaterial: VerificationMaterial,\n    controller: String\n):\n  override def toString: String =\n    s\"\"\"VerificationMethod(\n       |  id=$id,\n       |  type= ${`type`.toString()},\n       |  verificationMaterial=$verificationMaterial,\n       |  controller=$controller\n       |)\"\"\".stripMargin\n\n/** DID DOC Service of 'DIDCommMessaging' type. see https://www.w3.org/TR/did-core/#services and\n  * https://identity.foundation/didcomm-messaging/spec/#did-document-service-endpoint.\n  *\n  * @property\n  *   id Service's 'id' field\n  * @property\n  *   serviceEndpoint A service endpoint. It can be either a URI to be used for transport or a\n  *   mediator's DID in case of alternative endpoints.\n  * @property\n  *   routingKeys A possibly empty ordered array of strings referencing keys to be used when\n  *   preparing the message for transmission.\n  * @property\n  *   accept A possibly empty ordered array of strings representing accepted didcomm specification\n  *   versions.\n  */\n\ncase class Service(\n    id: URI,\n    `type`: Set[String],\n    serviceEndpoint: Set[ServiceEndpoint]\n):\n  override def toString: String =\n    s\"\"\"Service(\n       |  id=$id,\n       |  type= ${`type`},\n       |  serviceEndpoint=$serviceEndpoint\n       |)\"\"\".stripMargin\n\nsealed trait ServiceEndpoint\n\ncase class ServiceEndpointURI(uri: URI) extends ServiceEndpoint:\n  override def toString: String =\n    s\"\"\"ServiceEndpointURI(\n       |  uri=$uri\n       |)\"\"\".stripMargin\n\ncase class ServiceEndpointNodes(nodes: Set[URI]) extends ServiceEndpoint:\n  override def toString: String =\n    s\"\"\"ServiceEndpointNodes(\n      |  nodes=$nodes\n       |)\"\"\".stripMargin\n\ncase class ServiceEndpointDIDURL(did: String, fragment: String) extends ServiceEndpoint:\n  override def toString: String =\n    s\"\"\"ServiceEndpointDIDURL(\n       |  did=$did,\n       |  fragment=$fragment\n       |)\"\"\".stripMargin\n\ncase class ServiceEndpointDIDCommService(\n    uri: URI,\n    accept: Option[Set[String]],\n    routingKeys: Option[Set[String]]\n) extends ServiceEndpoint:\n  override def toString: String =\n    s\"\"\"ServiceEndpointDIDCommService(\n       |  uri=$uri,\n       |  accept=$accept,\n       |  routingKeys=$routingKeys\n       |)\"\"\".stripMargin\n"
        }
    ]
}