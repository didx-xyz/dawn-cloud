{
    "sourceFile": "src/xyz/didx/didcomm/DIDCommCodec.scala",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1697443305406,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1697443317654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,5 +170,5 @@\n           data,\n           byteCount\n         )\n \n-        \n\\ No newline at end of file\n+  given encodeDIDDoc: Encoder[DIDDoc] =\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697443325156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,5 +170,5 @@\n           data,\n           byteCount\n         )\n \n-  given encodeDIDDoc: Encoder[DIDDoc] =\n\\ No newline at end of file\n+  given encodeDIDDoc: Encoder[Service] =\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697443343435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,5 +170,5 @@\n           data,\n           byteCount\n         )\n \n-  given encodeDIDDoc: Encoder[Service] =\n\\ No newline at end of file\n+  given encodeDIDDoc: Encoder[Service] = \n\\ No newline at end of file\n"
                },
                {
                    "date": 1697443355454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,5 +170,6 @@\n           data,\n           byteCount\n         )\n \n-  given encodeDIDDoc: Encoder[Service] = \n\\ No newline at end of file\n+  given encodeDIDDoc: Encoder[Service] = \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1697443361261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,5 +171,13 @@\n           byteCount\n         )\n \n   given encodeDIDDoc: Encoder[Service] = \n-    \n\\ No newline at end of file\n+    new Encoder[Service]:\n+      final def apply(a: Service): Json =\n+        Json.obj(\n+          (\"id\", Json.fromString(a.id.toString)),\n+          (\"type\", Json.fromString(a.`type`)),\n+          (\"serviceEndpoint\", Json.fromString(a.serviceEndpoint.toString)),\n+          (\"routingKeys\", Json.fromValues(a.routingKeys.map(r => Json.fromString(r.toString)))),\n+          (\"priority\", Json.fromInt(a.priority))\n+        )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1697443415916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n           data,\n           byteCount\n         )\n \n-  given encodeDIDDoc: Encoder[Service] = \n+  given encode: Encoder[Service] = \n     new Encoder[Service]:\n       final def apply(a: Service): Json =\n         Json.obj(\n           (\"id\", Json.fromString(a.id.toString)),\n"
                },
                {
                    "date": 1697443452627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,14 +170,4 @@\n           data,\n           byteCount\n         )\n \n-  given encode: Encoder[Service] = \n-    new Encoder[Service]:\n-      final def apply(a: Service): Json =\n-        Json.obj(\n-          (\"id\", Json.fromString(a.id.toString)),\n-          (\"type\", Json.fromString(a.`type`)),\n-          (\"serviceEndpoint\", Json.fromString(a.serviceEndpoint.toString)),\n-          (\"routingKeys\", Json.fromValues(a.routingKeys.map(r => Json.fromString(r.toString)))),\n-          (\"priority\", Json.fromInt(a.priority))\n-        )\n\\ No newline at end of file\n"
                }
            ],
            "date": 1697443305406,
            "name": "Commit-0",
            "content": "package xyz.didx.didcomm\n\nimport cats.*\nimport cats.implicits.catsSyntaxApplicativeId\nimport cats.syntax.all.*\nimport io.circe.Decoder.Result\nimport io.circe.parser.*\nimport io.circe.syntax.*\nimport io.circe.*\n\nimport java.net.URI\nimport xyz.didx.didcomm.{DIDCommMessage, DIDCommAttachment, DIDCommData}\n\nobject DIDCommCodec:\n  given encodeDIDCommMessage: Encoder[DIDCommMessage] =\n    new Encoder[DIDCommMessage]:\n      final def apply(a: DIDCommMessage): Json =\n        Json.obj(\n          (\"id\", Json.fromString(a.id)),\n          (\"type\", Json.fromString(a.`type`)),\n          (\n            \"from\",\n            a.from.map(f => Json.fromString(f.toString)).getOrElse(Json.Null)\n          ),\n          (\n            \"to\",\n            a.to.map(t => Json.fromString(t.toString)).getOrElse(Json.Null)\n          ),\n          (\n            \"created_time\",\n            a.createdTime\n              .map(t => Json.fromString(t.toString))\n              .getOrElse(Json.Null)\n          ),\n          (\n            \"expires_time\",\n            a.expiresTime\n              .map(t => Json.fromString(t.toString))\n              .getOrElse(Json.Null)\n          ),\n          (\"body\", Json.fromString(a.body)),\n          (\n            \"attachments\",\n            Json.fromValues(\n              a.attachments\n                .getOrElse(List.empty[DIDCommAttachment])\n                .map(encodeAttachment.apply)\n            )\n          )\n        )\n  given encodeData: Encoder[DIDCommData] = new Encoder[DIDCommData]:\n    final def apply(a: DIDCommData): Json =\n      Json.obj(\n        (\"jws\", Json.fromString(a.jws.getOrElse(Json.Null.toString))),\n        (\"hash\", Json.fromString(a.hash.getOrElse(Json.Null.toString))),\n        (\n          \"links\",\n          Json.fromValues(\n            a.links\n              .getOrElse(List.empty[URI])\n              .map(u => Json.fromString(u.toString))\n          )\n        ),\n        (\"base64\", Json.fromString(a.base64.getOrElse(Json.Null.toString))),\n        (\n          \"json\",\n          io.circe.parser.parse(a.json.getOrElse(Json.Null.toString)) match\n            case Left(failure) => Json.Null\n            case Right(json)   => json\n        )\n      )\n\n  given encodeAttachment: Encoder[DIDCommAttachment] =\n    new Encoder[DIDCommAttachment]:\n      final def apply(a: DIDCommAttachment): Json =\n        Json.obj(\n          (\"id\", Json.fromString(a.id)),\n          (\n            \"media_type\",\n            Json.fromString(a.mediaType.getOrElse(Json.Null.toString))\n          ),\n          (\n            \"description\",\n            a.description\n              .map(d => Json.fromString(d.toString))\n              .getOrElse(Json.Null)\n          ),\n          (\n            \"filename\",\n            a.filename\n              .map(f => Json.fromString(f.toString))\n              .getOrElse(Json.Null)\n          ),\n          (\n            \"lastmod_time\",\n            a.lastmodTime\n              .map(t => Json.fromString(t.toString))\n              .getOrElse(Json.Null)\n          ),\n          (\"data\", a.data.map(d => encodeData.apply(d)).getOrElse(Json.Null)),\n          (\n            \"byte_count\",\n            a.byteCount.map(b => Json.fromInt(b)).getOrElse(Json.Null)\n          )\n        )\n  given decodeDIDCommMessage: Decoder[DIDCommMessage] =\n    new Decoder[DIDCommMessage]:\n      final def apply(c: HCursor): Result[DIDCommMessage] =\n        for {\n          id          <- c.downField(\"id\").as[String]\n          `type`      <- c.downField(\"type\").as[String]\n          from        <- c.downField(\"from\").as[Option[URI]]\n          to          <- c.downField(\"to\").as[Option[List[URI]]]\n          createdTime <- c.downField(\"created_time\").as[Option[String]]\n          expiresTime <- c.downField(\"expires_time\").as[Option[String]]\n          body <- c\n            .downField(\"body\")\n            .focus\n            .map(s => s.noSpaces)\n            .pure[Result] // c.downField(\"body\").as[String] // TODO: fix this (it's a bug in circe\n          attachments <- c\n            .downField(\"attachments\")\n            .as[Option[List[DIDCommAttachment]]]\n        } yield DIDCommMessage(\n          id,\n          `type`,\n          from,\n          to,\n          None,\n          None,\n          createdTime,\n          expiresTime,\n          body.getOrElse(\"\"),\n          attachments\n        )\n\n  given decodeData: Decoder[DIDCommData] = new Decoder[DIDCommData]:\n    final def apply(c: HCursor): Result[DIDCommData] =\n      for {\n        jws    <- c.downField(\"jws\").as[Option[String]]\n        hash   <- c.downField(\"hash\").as[Option[String]]\n        links  <- c.downField(\"links\").as[Option[List[String]]]\n        base64 <- c.downField(\"base64\").as[Option[String]]\n        json   <- c.downField(\"json\").focus.map(s => s.noSpaces).pure[Result]\n      } yield DIDCommData(\n        jws,\n        hash,\n        links.map(l => l.map(u => URI.create(u))),\n        base64,\n        json\n      )\n\n  given decodeAttachment: Decoder[DIDCommAttachment] =\n    new Decoder[DIDCommAttachment]:\n      final def apply(c: HCursor): Result[DIDCommAttachment] =\n        for {\n          id          <- c.downField(\"id\").as[String]\n          mediaType   <- c.downField(\"media_type\").as[Option[String]]\n          description <- c.downField(\"description\").as[Option[String]]\n          filename    <- c.downField(\"filename\").as[Option[String]]\n          lastmodTime <- c.downField(\"lastmod_time\").as[Option[String]]\n          data        <- c.downField(\"data\").as[Option[DIDCommData]]\n          byteCount   <- c.downField(\"byte_count\").as[Option[Int]]\n        } yield DIDCommAttachment(\n          id,\n          mediaType,\n          description,\n          filename,\n          lastmodTime,\n          data,\n          byteCount\n        )\n\n        "
        }
    ]
}